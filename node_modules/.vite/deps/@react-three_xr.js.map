{
  "version": 3,
  "sources": ["../../@react-three/xr/src/XRController.ts", "../../@react-three/xr/src/utils.ts", "../../@react-three/xr/src/XREvents.ts", "../../@react-three/xr/src/Interactions.tsx", "../../@react-three/xr/src/context.ts", "../../@react-three/xr/src/XR.tsx", "../../@react-three/xr/src/XRControllerModelFactory.ts", "../../@react-three/xr/src/XRControllerModel.ts", "../../@react-three/xr/src/Controllers.tsx", "../../@react-three/xr/src/XRHandMeshModel.ts", "../../@react-three/xr/src/OculusHandModel.ts", "../../@react-three/xr/src/Hands.tsx", "../../@react-three/xr/src/Teleportation.tsx"],
  "sourcesContent": ["import * as THREE from 'three'\nimport { XRControllerEvent } from './XREvents'\nimport { XRControllerModel } from './XRControllerModel'\n\n/** Counterpart of WebXRController from three js\n * in a sense that it's long living */\nexport class XRController extends THREE.Group {\n  readonly index: number\n  readonly controller: THREE.XRTargetRaySpace\n  readonly grip: THREE.XRGripSpace\n  readonly hand: THREE.XRHandSpace\n  public inputSource: XRInputSource | null = null\n  public xrControllerModel: XRControllerModel | null = null\n\n  constructor(index: number, gl: THREE.WebGLRenderer) {\n    super()\n\n    this.index = index\n    this.controller = gl.xr.getController(index)\n    this.grip = gl.xr.getControllerGrip(index)\n    this.hand = gl.xr.getHand(index)\n\n    this.grip.userData.name = 'grip'\n    this.controller.userData.name = 'controller'\n    this.hand.userData.name = 'hand'\n\n    this.visible = false\n    this.add(this.controller, this.grip, this.hand)\n\n    this._onConnected = this._onConnected.bind(this)\n    this._onDisconnected = this._onDisconnected.bind(this)\n\n    this.controller.addEventListener('connected', this._onConnected)\n    this.controller.addEventListener('disconnected', this._onDisconnected)\n  }\n\n  _onConnected(event: XRControllerEvent) {\n    if (event.fake) return\n    if (!event.data) return\n\n    this.visible = true\n    this.inputSource = event.data\n    this.dispatchEvent(event)\n  }\n\n  _onDisconnected(event: XRControllerEvent) {\n    if (event.fake) return\n\n    this.visible = false\n    this.inputSource = null\n    this.dispatchEvent(event)\n  }\n\n  dispose() {\n    this.controller.removeEventListener('connected', this._onConnected)\n    this.controller.removeEventListener('disconnected', this._onDisconnected)\n  }\n}\n", "import * as React from 'react'\n\n/**\n * Filters to unique entries of an array.\n */\nexport const uniq = <T>(arr: T[]): T[] => Array.from(new Set<T>(arr))\n\n/**\n * An SSR-friendly useLayoutEffect.\n *\n * React currently throws a warning when using useLayoutEffect on the server.\n * To get around it, we can conditionally useEffect on the server (no-op) and\n * useLayoutEffect elsewhere.\n *\n * @see https://github.com/facebook/react/issues/14927\n */\nexport const useIsomorphicLayoutEffect =\n  typeof window !== 'undefined' && (window.document?.createElement || window.navigator?.product === 'ReactNative')\n    ? React.useLayoutEffect\n    : React.useEffect\n\n/**\n * Returns a mutable callback function for event handlers.\n */\nexport function useCallbackRef<T>(fn: T): React.MutableRefObject<T> {\n  const ref = React.useRef<T>(fn)\n  useIsomorphicLayoutEffect(() => void (ref.current = fn), [fn])\n  return ref\n}\n", "import { XRController } from './XRController'\nimport { useXR } from './XR'\nimport { useCallbackRef, useIsomorphicLayoutEffect } from './utils'\n\nexport interface XREventRepresentation {\n  type: string\n  target: any\n}\nexport interface XREvent<T extends XREventRepresentation> {\n  nativeEvent: T\n  target: T['target']\n}\n\nexport type XRControllerEventType = Exclude<THREE.XRControllerEventType, XRSessionEventType>\nexport interface XRControllerEvent {\n  type: XRControllerEventType\n  target: XRController\n  data?: XRInputSource\n  fake?: boolean\n}\n\nexport type XREventHandler<T extends XREventRepresentation> = (event: XREvent<T>) => void\nexport interface XREventOptions {\n  handedness?: XRHandedness\n}\n\nexport function useXREvent(event: XRControllerEventType, handler: XREventHandler<XRControllerEvent>, { handedness }: XREventOptions = {}) {\n  const handlerRef = useCallbackRef(handler)\n  const controllers = useXR((state) => state.controllers)\n\n  useIsomorphicLayoutEffect(() => {\n    const listeners = controllers.map((target) => {\n      if (handedness && target.inputSource && target.inputSource.handedness !== handedness) return\n\n      const listener = (nativeEvent: XRControllerEvent) => handlerRef.current({ nativeEvent, target })\n      target.controller.addEventListener(event, listener)\n      return () => target.controller.removeEventListener(event, listener)\n    })\n\n    return () => listeners.forEach((cleanup) => cleanup?.())\n  }, [controllers, handedness, event])\n}\n", "import * as React from 'react'\nimport * as THREE from 'three'\nimport { useThree, useFrame } from '@react-three/fiber'\nimport { useXR } from './XR'\nimport { XRController } from './XRController'\nimport { useXREvent, XREvent, XRControllerEvent } from './XREvents'\nimport { useCallbackRef, useIsomorphicLayoutEffect } from './utils'\n\nexport interface XRInteractionEvent {\n  intersection?: THREE.Intersection\n  intersections: THREE.Intersection[]\n  target: XRController\n}\n\nexport type XRInteractionType =\n  | 'onHover'\n  | 'onBlur'\n  | 'onSelect'\n  | 'onSelectEnd'\n  | 'onSelectStart'\n  | 'onSelectMissed'\n  | 'onSqueeze'\n  | 'onSqueezeEnd'\n  | 'onSqueezeStart'\n  | 'onSqueezeMissed'\n  | 'onMove'\n\nexport type XRInteractionHandler = (event: XRInteractionEvent) => void\n\nconst tempMatrix = new THREE.Matrix4()\n\nexport function InteractionManager({ children }: { children: React.ReactNode }) {\n  const events = useThree((state) => state.events)\n  const get = useThree((state) => state.get)\n  const raycaster = useThree((state) => state.raycaster)\n  const controllers = useXR((state) => state.controllers)\n  const interactions = useXR((state) => state.interactions)\n  const hoverState = useXR((state) => state.hoverState)\n  const hasInteraction = useXR((state) => state.hasInteraction)\n  const getInteraction = useXR((state) => state.getInteraction)\n\n  const intersect = React.useCallback(\n    (controller: THREE.Object3D) => {\n      const objects = Array.from(interactions.keys())\n      tempMatrix.identity().extractRotation(controller.matrixWorld)\n      raycaster.ray.origin.setFromMatrixPosition(controller.matrixWorld)\n      raycaster.ray.direction.set(0, 0, -1).applyMatrix4(tempMatrix)\n\n      return raycaster.intersectObjects(objects, true)\n    },\n    [interactions, raycaster]\n  )\n\n  // Trigger hover and blur events\n  useFrame(() => {\n    if (interactions.size === 0) return\n\n    for (const target of controllers) {\n      if (!target.inputSource?.handedness) {\n        return\n      }\n      const hovering = hoverState[target.inputSource.handedness]\n      const hits = new Set()\n      let intersections = intersect(target.controller)\n\n      if (events.filter) {\n        // https://github.com/mrdoob/three.js/issues/16031\n        // Allow custom userland intersect sort order\n        intersections = events.filter(intersections, get())\n      } else {\n        // Otherwise, filter to first hit\n        const hit = intersections.find((i) => i?.object)\n        if (hit) intersections = [hit]\n      }\n\n      for (const intersection of intersections) {\n        let eventObject: THREE.Object3D | null = intersection.object\n\n        while (eventObject) {\n          if (hasInteraction(eventObject, 'onHover') && !hovering.has(eventObject)) {\n            const handlers = getInteraction(eventObject, 'onHover')!\n            for (const handler of handlers) {\n              handler({ target, intersection, intersections })\n            }\n          }\n\n          const moveHandlers = getInteraction(eventObject, 'onMove')\n          moveHandlers?.forEach((handler) => handler({ target, intersection, intersections }))\n\n          hovering.set(eventObject, intersection)\n          hits.add(eventObject.id)\n          eventObject = eventObject.parent\n        }\n      }\n\n      // Trigger blur on all the object that were hovered in the previous frame\n      // but missed in this one\n      for (const eventObject of hovering.keys()) {\n        if (!hits.has(eventObject.id)) {\n          hovering.delete(eventObject)\n\n          const handlers = getInteraction(eventObject, 'onBlur')\n          if (!handlers) continue\n\n          for (const handler of handlers) {\n            handler({ target, intersections })\n          }\n        }\n      }\n    }\n  })\n\n  const triggerEvent = React.useCallback(\n    (interaction: XRInteractionType) => (e: XREvent<XRControllerEvent>) => {\n      if (!e.target.inputSource?.handedness) {\n        return\n      }\n      const hovering = hoverState[e.target.inputSource.handedness]\n      const intersections = Array.from(new Set(hovering.values()))\n\n      interactions.forEach((handlers, object) => {\n        if (hovering.has(object)) {\n          if (!handlers[interaction]) return\n\n          for (const handler of handlers[interaction]) {\n            handler.current?.({ target: e.target, intersection: hovering.get(object), intersections })\n          }\n        } else {\n          if (interaction === 'onSelect' && handlers['onSelectMissed']) {\n            for (const handler of handlers['onSelectMissed']) {\n              handler.current?.({ target: e.target, intersections })\n            }\n          } else if (interaction === 'onSqueeze' && handlers['onSqueezeMissed']) {\n            for (const handler of handlers['onSqueezeMissed']) {\n              handler.current?.({ target: e.target, intersections })\n            }\n          }\n        }\n      })\n    },\n    [hoverState, interactions]\n  )\n\n  useXREvent('select', triggerEvent('onSelect'))\n  useXREvent('selectstart', triggerEvent('onSelectStart'))\n  useXREvent('selectend', triggerEvent('onSelectEnd'))\n  useXREvent('squeeze', triggerEvent('onSqueeze'))\n  useXREvent('squeezeend', triggerEvent('onSqueezeEnd'))\n  useXREvent('squeezestart', triggerEvent('onSqueezeStart'))\n\n  return <>{children}</>\n}\n\nexport function useInteraction(ref: React.RefObject<THREE.Object3D>, type: XRInteractionType, handler?: XRInteractionHandler) {\n  const addInteraction = useXR((state) => state.addInteraction)\n  const removeInteraction = useXR((state) => state.removeInteraction)\n  const handlerRef = useCallbackRef(handler)\n\n  useIsomorphicLayoutEffect(() => {\n    const target = ref.current\n    if (!target || !handlerRef.current) return\n\n    addInteraction(target, type, handlerRef as React.RefObject<XRInteractionHandler>)\n\n    return () => removeInteraction(target, type, handlerRef as React.RefObject<XRInteractionHandler>)\n  }, [ref, type, addInteraction, removeInteraction])\n}\n\nexport interface InteractiveProps {\n  onHover?: XRInteractionHandler\n  onBlur?: XRInteractionHandler\n  onSelectStart?: XRInteractionHandler\n  onSelectEnd?: XRInteractionHandler\n  onSelectMissed?: XRInteractionHandler\n  onSelect?: XRInteractionHandler\n  onSqueezeStart?: XRInteractionHandler\n  onSqueezeEnd?: XRInteractionHandler\n  onSqueezeMissed?: XRInteractionHandler\n  onSqueeze?: XRInteractionHandler\n  onMove?: XRInteractionHandler\n  children: React.ReactNode\n}\nexport const Interactive = React.forwardRef<THREE.Group, InteractiveProps>(function Interactive(\n  {\n    onHover,\n    onBlur,\n    onSelectStart,\n    onSelectEnd,\n    onSelectMissed,\n    onSelect,\n    onSqueezeStart,\n    onSqueezeEnd,\n    onSqueezeMissed,\n    onSqueeze,\n    onMove,\n    children\n  }: InteractiveProps,\n  passedRef\n) {\n  const ref = React.useRef<THREE.Group>(null!)\n  React.useImperativeHandle(passedRef, () => ref.current)\n\n  useInteraction(ref, 'onHover', onHover)\n  useInteraction(ref, 'onBlur', onBlur)\n  useInteraction(ref, 'onSelectStart', onSelectStart)\n  useInteraction(ref, 'onSelectEnd', onSelectEnd)\n  useInteraction(ref, 'onSelectMissed', onSelectMissed)\n  useInteraction(ref, 'onSelect', onSelect)\n  useInteraction(ref, 'onSqueezeStart', onSqueezeStart)\n  useInteraction(ref, 'onSqueezeEnd', onSqueezeEnd)\n  useInteraction(ref, 'onSqueezeMissed', onSqueezeMissed)\n  useInteraction(ref, 'onSqueeze', onSqueeze)\n  useInteraction(ref, 'onMove', onMove)\n\n  return <group ref={ref}>{children}</group>\n})\n\nexport interface RayGrabProps extends InteractiveProps {}\nexport const RayGrab = React.forwardRef<THREE.Group, RayGrabProps>(function RayGrab(\n  { onSelectStart, onSelectEnd, children, ...rest },\n  forwardedRef\n) {\n  const grabbingController = React.useRef<THREE.Object3D>()\n  const groupRef = React.useRef<THREE.Group>(null!)\n  const previousTransform = React.useMemo(() => new THREE.Matrix4(), [])\n  React.useImperativeHandle(forwardedRef, () => groupRef.current)\n\n  useFrame(() => {\n    const controller = grabbingController.current\n    const group = groupRef.current\n    if (!controller) return\n\n    group.applyMatrix4(previousTransform)\n    group.applyMatrix4(controller.matrixWorld)\n    group.updateMatrixWorld()\n\n    previousTransform.copy(controller.matrixWorld).invert()\n  })\n\n  return (\n    <Interactive\n      ref={groupRef}\n      onSelectStart={(e) => {\n        grabbingController.current = e.target.controller\n        previousTransform.copy(e.target.controller.matrixWorld).invert()\n        onSelectStart?.(e)\n      }}\n      onSelectEnd={(e) => {\n        if (e.target.controller === grabbingController.current) {\n          grabbingController.current = undefined\n        }\n        onSelectEnd?.(e)\n      }}\n      {...rest}\n    >\n      {children}\n    </Interactive>\n  )\n})\n\nexport type HitTestCallback = (hitMatrix: THREE.Matrix4, hit: XRHitTestResult) => void\n\nexport function useHitTest(hitTestCallback: HitTestCallback) {\n  const session = useXR((state) => state.session)\n  const hitTestSource = React.useRef<XRHitTestSource | undefined>()\n  const hitMatrix = React.useMemo(() => new THREE.Matrix4(), [])\n\n  useIsomorphicLayoutEffect(() => {\n    if (!session) return void (hitTestSource.current = undefined)\n\n    session.requestReferenceSpace('viewer').then(async (referenceSpace) => {\n      hitTestSource.current = await session?.requestHitTestSource?.({ space: referenceSpace })\n    })\n  }, [session])\n\n  useFrame((state, _, frame: XRFrame) => {\n    if (!frame || !hitTestSource.current) return\n\n    const [hit] = frame.getHitTestResults(hitTestSource.current)\n    if (hit) {\n      const referenceSpace = state.gl.xr.getReferenceSpace()!\n      const pose = hit.getPose(referenceSpace)\n\n      if (pose) {\n        hitMatrix.fromArray(pose.transform.matrix)\n        hitTestCallback(hitMatrix, hit)\n      }\n    }\n  })\n}\n", "import * as React from 'react'\nimport * as THREE from 'three'\nimport { GetState, SetState, UseBoundStore } from 'zustand'\nimport { XRInteractionType, XRInteractionHandler } from './Interactions'\nimport { XRController } from './XRController'\n\nexport interface XRState {\n  set: SetState<XRState>\n  get: GetState<XRState>\n\n  controllers: XRController[]\n  isPresenting: boolean\n  isHandTracking: boolean\n  player: THREE.Group\n  session: XRSession | null\n  foveation: number\n  frameRate?: number\n  referenceSpace: XRReferenceSpaceType\n\n  hoverState: Record<XRHandedness, Map<THREE.Object3D, THREE.Intersection>>\n  interactions: Map<THREE.Object3D, Record<XRInteractionType, React.RefObject<XRInteractionHandler>[]>>\n  hasInteraction: (object: THREE.Object3D, eventType: XRInteractionType) => boolean\n  getInteraction: (object: THREE.Object3D, eventType: XRInteractionType) => XRInteractionHandler[] | undefined\n  addInteraction: (object: THREE.Object3D, eventType: XRInteractionType, handlerRef: React.RefObject<XRInteractionHandler>) => void\n  removeInteraction: (object: THREE.Object3D, eventType: XRInteractionType, handlerRef: React.RefObject<XRInteractionHandler>) => void\n}\n\nexport const XRContext = React.createContext<UseBoundStore<XRState>>(null!)\n", "import * as React from 'react'\nimport * as THREE from 'three'\nimport create, { EqualityChecker, GetState, SetState, StateSelector } from 'zustand'\nimport { useThree } from '@react-three/fiber'\nimport { XRController } from './XRController'\nimport { InteractionManager, XRInteractionHandler, XRInteractionType } from './Interactions'\nimport { XREventHandler } from './XREvents'\nimport { uniq, useIsomorphicLayoutEffect, useCallbackRef } from './utils'\nimport { XRContext, XRState } from './context'\n\ninterface GlobalSessionState {\n  set: SetState<GlobalSessionState>\n  get: GetState<GlobalSessionState>\n  session: XRSession | null\n  referenceSpaceType: XRReferenceSpaceType | null\n}\nconst globalSessionStore = create<GlobalSessionState>((set, get) => ({ set, get, session: null, referenceSpaceType: null }))\n\nexport type XRManagerEventType = 'sessionstart' | 'sessionend'\nexport interface XRManagerEvent {\n  type: XRManagerEventType\n  target: XRSession\n}\nexport interface XRProps {\n  /**\n   * Enables foveated rendering. `Default is `0`\n   * 0 = no foveation, full resolution\n   * 1 = maximum foveation, the edges render at lower resolution\n   */\n  foveation?: number\n  /**\n   * The target framerate for the XRSystem. Smaller rates give more CPU headroom at the cost of responsiveness.\n   * Recommended range is `72`-`120`. Default is unset and left to the device.\n   * @note If your experience cannot effectively reach the target framerate, it will be subject to frame reprojection\n   * which will halve the effective framerate. Choose a conservative estimate that balances responsiveness and\n   * headroom based on your experience.\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Rendering#refresh_rate_and_frame_rate\n   */\n  frameRate?: number\n  /** Type of WebXR reference space to use. Default is `local-floor` */\n  referenceSpace?: XRReferenceSpaceType\n  /** Called as an XRSession is requested */\n  onSessionStart?: XREventHandler<XRManagerEvent>\n  /** Called after an XRSession is terminated */\n  onSessionEnd?: XREventHandler<XRManagerEvent>\n  /** Called when an XRSession is hidden or unfocused. */\n  onVisibilityChange?: XREventHandler<XRSessionEvent>\n  /** Called when available inputsources change */\n  onInputSourcesChange?: XREventHandler<XRSessionEvent>\n  children: React.ReactNode\n}\nfunction XRManager({\n  foveation = 0,\n  frameRate = undefined,\n  referenceSpace = 'local-floor',\n  onSessionStart,\n  onSessionEnd,\n  onVisibilityChange,\n  onInputSourcesChange,\n  children\n}: XRProps) {\n  const gl = useThree((state) => state.gl)\n  const camera = useThree((state) => state.camera)\n  const player = useXR((state) => state.player)\n  const get = useXR((state) => state.get)\n  const set = useXR((state) => state.set)\n  const session = useXR((state) => state.session)\n  const controllers = useXR((state) => state.controllers)\n\n  const onSessionStartRef = useCallbackRef(onSessionStart)\n  const onSessionEndRef = useCallbackRef(onSessionEnd)\n  const onVisibilityChangeRef = useCallbackRef(onVisibilityChange)\n  const onInputSourcesChangeRef = useCallbackRef(onInputSourcesChange)\n\n  useIsomorphicLayoutEffect(() => {\n    const handlers = [0, 1].map((id) => {\n      const target = new XRController(id, gl)\n      const onConnected = () => set((state) => ({ controllers: [...state.controllers, target] }))\n      const onDisconnected = () => set((state) => ({ controllers: state.controllers.filter((it) => it !== target) }))\n\n      target.addEventListener('connected', onConnected)\n      target.addEventListener('disconnected', onDisconnected)\n\n      return () => {\n        target.removeEventListener('connected', onConnected)\n        target.removeEventListener('disconnected', onDisconnected)\n      }\n    })\n\n    return () => handlers.forEach((cleanup) => cleanup())\n  }, [gl, set])\n\n  useIsomorphicLayoutEffect(() => globalSessionStore.subscribe(({ session }) => set(() => ({ session }))), [gl.xr, set])\n\n  useIsomorphicLayoutEffect(() => {\n    gl.xr.setFoveation(foveation)\n    set(() => ({ foveation }))\n  }, [gl.xr, foveation, set])\n\n  useIsomorphicLayoutEffect(() => {\n    try {\n      if (frameRate) session?.updateTargetFrameRate?.(frameRate)\n    } catch (_) {\n      // Framerate not supported or configurable\n    }\n    set(() => ({ frameRate }))\n  }, [session, frameRate, set])\n\n  useIsomorphicLayoutEffect(() => {\n    const globalSessionState = globalSessionStore.getState()\n    gl.xr.setReferenceSpaceType(referenceSpace)\n    set(() => ({ referenceSpace }))\n    globalSessionState.set({ referenceSpaceType: referenceSpace })\n  }, [gl.xr, referenceSpace, set])\n\n  useIsomorphicLayoutEffect(() => {\n    if (!session) return void gl.xr.setSession(null!)\n\n    const handleSessionStart = (nativeEvent: XRManagerEvent) => {\n      set(() => ({ isPresenting: true }))\n      onSessionStartRef.current?.({ nativeEvent: { ...nativeEvent, target: session }, target: session })\n    }\n    const handleSessionEnd = (nativeEvent: XRManagerEvent) => {\n      set(() => ({ isPresenting: false, session: null }))\n      globalSessionStore.setState(() => ({ session: null }))\n      onSessionEndRef.current?.({ nativeEvent: { ...nativeEvent, target: session }, target: session })\n    }\n    const handleVisibilityChange = (nativeEvent: XRSessionEvent) => {\n      onVisibilityChangeRef.current?.({ nativeEvent, target: session })\n    }\n    const handleInputSourcesChange = (nativeEvent: XRInputSourceChangeEvent) => {\n      const isHandTracking = Object.values(session.inputSources).some((source) => source.hand)\n      set(() => ({ isHandTracking }))\n      onInputSourcesChangeRef.current?.({ nativeEvent, target: session })\n    }\n\n    gl.xr.addEventListener('sessionstart', handleSessionStart)\n    gl.xr.addEventListener('sessionend', handleSessionEnd)\n    session.addEventListener('visibilitychange', handleVisibilityChange)\n    session.addEventListener('inputsourceschange', handleInputSourcesChange)\n\n    gl.xr.setSession(session).then(() => {\n      // on setSession, three#WebXRManager resets foveation to 1\n      // so foveation set needs to happen after it\n      gl.xr.setFoveation(get().foveation)\n    })\n\n    return () => {\n      gl.xr.removeEventListener('sessionstart', handleSessionStart)\n      gl.xr.removeEventListener('sessionend', handleSessionEnd)\n      session.removeEventListener('visibilitychange', handleVisibilityChange)\n      session.removeEventListener('inputsourceschange', handleInputSourcesChange)\n    }\n  }, [session, gl.xr, set, get])\n\n  return (\n    <InteractionManager>\n      <primitive object={player}>\n        <primitive object={camera} />\n        {controllers.map((controller) => (\n          <primitive key={controller.index} object={controller} />\n        ))}\n      </primitive>\n      {children}\n    </InteractionManager>\n  )\n}\n\nexport function XR(props: XRProps) {\n  const store = React.useMemo(\n    () =>\n      create<XRState>((set, get) => ({\n        set,\n        get,\n\n        controllers: [],\n        isPresenting: false,\n        isHandTracking: false,\n        player: new THREE.Group(),\n        session: null,\n        foveation: 0,\n        referenceSpace: 'local-floor',\n\n        hoverState: {\n          left: new Map(),\n          right: new Map(),\n          none: new Map()\n        },\n        interactions: new Map(),\n        hasInteraction(object: THREE.Object3D, eventType: XRInteractionType) {\n          return !!get()\n            .interactions.get(object)\n            ?.[eventType].some((handlerRef) => handlerRef.current)\n        },\n        getInteraction(object: THREE.Object3D, eventType: XRInteractionType) {\n          return get()\n            .interactions.get(object)\n            ?.[eventType].reduce((result, handlerRef) => {\n              if (handlerRef.current) {\n                result.push(handlerRef.current)\n              }\n              return result\n            }, [] as XRInteractionHandler[])\n        },\n        addInteraction(object: THREE.Object3D, eventType: XRInteractionType, handlerRef: React.RefObject<XRInteractionHandler>) {\n          const interactions = get().interactions\n          if (!interactions.has(object)) {\n            interactions.set(object, {\n              onHover: [],\n              onBlur: [],\n              onSelect: [],\n              onSelectEnd: [],\n              onSelectStart: [],\n              onSelectMissed: [],\n              onSqueeze: [],\n              onSqueezeEnd: [],\n              onSqueezeStart: [],\n              onSqueezeMissed: [],\n              onMove: []\n            })\n          }\n\n          const target = interactions.get(object)!\n          target[eventType].push(handlerRef)\n        },\n        removeInteraction(object: THREE.Object3D, eventType: XRInteractionType, handlerRef: React.RefObject<XRInteractionHandler>) {\n          const target = get().interactions.get(object)\n          if (target) {\n            const interactionIndex = target[eventType].indexOf(handlerRef)\n            if (interactionIndex !== -1) target[eventType].splice(interactionIndex, 1)\n          }\n        }\n      })),\n    []\n  )\n\n  return (\n    <XRContext.Provider value={store}>\n      <XRManager {...props} />\n    </XRContext.Provider>\n  )\n}\n\nexport type XRButtonStatus = 'unsupported' | 'exited' | 'entered'\nexport type XRButtonUnsupportedReason = 'unknown' | 'https' | 'security'\nexport interface XRButtonProps extends Omit<React.ButtonHTMLAttributes<HTMLButtonElement>, 'children' | 'onError'> {\n  /** The type of `XRSession` to create */\n  mode: 'AR' | 'VR' | 'inline'\n  /**\n   * `XRSession` configuration options\n   * @see https://immersive-web.github.io/webxr/#feature-dependencies\n   */\n  sessionInit?: XRSessionInit\n  /** Whether this button should only enter an `XRSession`. Default is `false` */\n  enterOnly?: boolean\n  /** Whether this button should only exit an `XRSession`. Default is `false` */\n  exitOnly?: boolean\n  /** This callback gets fired if XR initialization fails. */\n  onError?: (error: Error) => void\n  /** React children, can also accept a callback returning an `XRButtonStatus` */\n  children?: React.ReactNode | ((status: XRButtonStatus) => React.ReactNode)\n}\n\nconst getSessionOptions = (\n  globalStateReferenceSpaceType: XRReferenceSpaceType | null,\n  sessionInit: XRSessionInit | undefined\n): XRSessionInit | undefined => {\n  if (!globalStateReferenceSpaceType && !sessionInit) {\n    return undefined\n  }\n\n  if (globalStateReferenceSpaceType && !sessionInit) {\n    return { optionalFeatures: [globalStateReferenceSpaceType] }\n  }\n\n  if (globalStateReferenceSpaceType && sessionInit) {\n    return { ...sessionInit, optionalFeatures: uniq([...(sessionInit.optionalFeatures ?? []), globalStateReferenceSpaceType]) }\n  }\n\n  return sessionInit\n}\n\nexport const startSession = async (sessionMode: XRSessionMode, sessionInit: XRButtonProps['sessionInit']) => {\n  const xrState = globalSessionStore.getState()\n\n  if (xrState.session) {\n    console.warn('@react-three/xr: session already started, please stop it first')\n    return\n  }\n\n  const options = getSessionOptions(xrState.referenceSpaceType, sessionInit)\n  const session = await navigator.xr!.requestSession(sessionMode, options)\n  xrState.set(() => ({ session }))\n  return session\n}\n\nexport const stopSession = async () => {\n  const xrState = globalSessionStore.getState()\n\n  if (!xrState.session) {\n    console.warn('@react-three/xr: no session to stop, please start it first')\n    return\n  }\n\n  await xrState.session.end()\n  xrState.set({ session: null })\n}\n\nexport const toggleSession = async (\n  sessionMode: XRSessionMode,\n  { sessionInit, enterOnly, exitOnly }: Pick<XRButtonProps, 'sessionInit' | 'enterOnly' | 'exitOnly'> = {}\n) => {\n  const xrState = globalSessionStore.getState()\n\n  // Bail if certain toggle way is disabled\n  if (xrState.session && enterOnly) return\n  if (!xrState.session && exitOnly) return\n\n  // Exit/enter session\n  if (xrState.session) {\n    return await stopSession()\n  } else {\n    return await startSession(sessionMode, sessionInit)\n  }\n}\n\nconst getLabel = (status: XRButtonStatus, mode: XRButtonProps['mode'], reason: XRButtonUnsupportedReason) => {\n  switch (status) {\n    case 'entered':\n      return `Exit ${mode}`\n    case 'exited':\n      return `Enter ${mode}`\n    case 'unsupported':\n    default:\n      switch (reason) {\n        case 'https':\n          return 'HTTPS needed'\n        case 'security':\n          return `${mode} blocked`\n        case 'unknown':\n        default:\n          return `${mode} unsupported`\n      }\n  }\n}\n\nexport const XRButton = React.forwardRef<HTMLButtonElement, XRButtonProps>(function XRButton(\n  { mode, sessionInit, enterOnly = false, exitOnly = false, onClick, onError, children, ...props },\n  ref\n) {\n  const [status, setStatus] = React.useState<XRButtonStatus>('exited')\n  const [reason, setReason] = React.useState<XRButtonUnsupportedReason>('unknown')\n  const label = getLabel(status, mode, reason)\n  const sessionMode = (mode === 'inline' ? mode : `immersive-${mode.toLowerCase()}`) as XRSessionMode\n  const onErrorRef = useCallbackRef(onError)\n\n  useIsomorphicLayoutEffect(() => {\n    if (!navigator?.xr) return void setStatus('unsupported')\n    navigator.xr\n      .isSessionSupported(sessionMode)\n      .then((supported) => {\n        if (!supported) {\n          const isHttps = location.protocol === 'https:'\n          setStatus('unsupported')\n          setReason(isHttps ? 'unknown' : 'https')\n        } else {\n          setStatus('exited')\n        }\n      })\n      .catch((error) => {\n        setStatus('unsupported')\n        // https://developer.mozilla.org/en-US/docs/Web/API/XRSystem/isSessionSupported#exceptions\n        if ('name' in error && error.name === 'SecurityError') {\n          setReason('security')\n        } else {\n          setReason('unknown')\n        }\n      })\n  }, [sessionMode])\n\n  useIsomorphicLayoutEffect(\n    () =>\n      globalSessionStore.subscribe((state) => {\n        if (state.session) {\n          setStatus('entered')\n        } else if (status !== 'unsupported') {\n          setStatus('exited')\n        }\n      }),\n    [status]\n  )\n\n  const handleButtonClick = React.useCallback(\n    async (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n      onClick?.(event)\n\n      try {\n        toggleSession(sessionMode, { sessionInit, enterOnly, exitOnly })\n      } catch (e) {\n        const onError = onErrorRef.current\n        if (onError && e instanceof Error) onError(e)\n        else throw e\n      }\n    },\n    [onClick, sessionMode, sessionInit, enterOnly, exitOnly, onErrorRef]\n  )\n\n  return (\n    <button {...props} ref={ref} onClick={status === 'unsupported' ? onClick : handleButtonClick}>\n      {(typeof children === 'function' ? children(status) : children) ?? label}\n    </button>\n  )\n})\n\nconst buttonStyles: any = {\n  position: 'absolute',\n  bottom: '24px',\n  left: '50%',\n  transform: 'translateX(-50%)',\n  padding: '12px 24px',\n  border: '1px solid white',\n  borderRadius: '4px',\n  background: 'rgba(0, 0, 0, 0.1)',\n  color: 'white',\n  font: 'normal 0.8125rem sans-serif',\n  outline: 'none',\n  zIndex: 99999,\n  cursor: 'pointer'\n}\n\nexport const ARButton = React.forwardRef<HTMLButtonElement, Omit<XRButtonProps, 'mode'>>(\n  (\n    {\n      style = buttonStyles,\n      sessionInit = {\n        // @ts-ignore\n        domOverlay: typeof document !== 'undefined' ? { root: document.body } : undefined,\n        optionalFeatures: ['hit-test', 'dom-overlay', 'dom-overlay-for-handheld-ar']\n      },\n      children,\n      ...rest\n    },\n    ref\n  ) => (\n    <XRButton {...rest} ref={ref} mode=\"AR\" style={style} sessionInit={sessionInit}>\n      {children}\n    </XRButton>\n  )\n)\n\nexport const VRButton = React.forwardRef<HTMLButtonElement, Omit<XRButtonProps, 'mode'>>(\n  (\n    {\n      style = buttonStyles,\n      sessionInit = { optionalFeatures: ['local-floor', 'bounded-floor', 'hand-tracking', 'layers'] },\n      children,\n      ...rest\n    },\n    ref\n  ) => (\n    <XRButton {...rest} ref={ref} mode=\"VR\" style={style} sessionInit={sessionInit}>\n      {children}\n    </XRButton>\n  )\n)\n\nexport function useXR<T = XRState>(\n  selector: StateSelector<XRState, T> = (state) => state as unknown as T,\n  equalityFn?: EqualityChecker<T>\n) {\n  const store = React.useContext(XRContext)\n  if (!store) throw new Error('useXR must be used within an <XR /> component!')\n  return store(selector, equalityFn)\n}\n\nexport function useController(handedness: XRHandedness) {\n  const controllers = useXR((state) => state.controllers)\n  const controller = React.useMemo(\n    () => controllers.find(({ inputSource }) => inputSource?.handedness && inputSource.handedness === handedness),\n    [handedness, controllers]\n  )\n\n  return controller\n}\n", "import { Object3D } from 'three'\nimport { fetchProfile, GLTFLoader, MotionController } from 'three-stdlib'\nimport { XRControllerModel } from './XRControllerModel'\n\nconst DEFAULT_PROFILES_PATH = 'https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles'\nconst DEFAULT_PROFILE = 'generic-trigger'\n\nexport class XRControllerModelFactory {\n  gltfLoader: GLTFLoader\n  path: string\n  private _assetCache: Record<string, { scene: Object3D } | undefined>\n\n  constructor(gltfLoader: GLTFLoader | null = null, path = DEFAULT_PROFILES_PATH) {\n    this.gltfLoader = gltfLoader ?? new GLTFLoader()\n    this.path = path\n    this._assetCache = {}\n  }\n\n   initializeControllerModel(controllerModel: XRControllerModel, xrInputSource: XRInputSource): Promise<void> {\n    // TODO check gamepad in other condition\n    if (xrInputSource.targetRayMode !== 'tracked-pointer' || !xrInputSource.gamepad) {\n      return Promise.resolve()\n    }\n\n    return fetchProfile(xrInputSource, this.path, DEFAULT_PROFILE)\n      .then(({ profile, assetPath }) => {\n        if (!assetPath) {\n          throw new Error('no asset path')\n        }\n\n        const motionController = new MotionController(xrInputSource, profile, assetPath)\n        controllerModel.connectMotionController(motionController)\n\n        const assetUrl = motionController.assetUrl\n\n        const cachedAsset = this._assetCache[assetUrl]\n        if (cachedAsset) {\n          const scene = cachedAsset.scene.clone()\n\n          controllerModel.connectModel(scene)\n        } else {\n          if (!this.gltfLoader) {\n            throw new Error('GLTFLoader not set.')\n          }\n\n          this.gltfLoader.setPath('')\n          this.gltfLoader.load(\n            assetUrl,\n            (asset: { scene: Object3D }) => {\n              if (!controllerModel.motionController) {\n                console.warn('motionController gone while gltf load, bailing...')\n                return\n              }\n\n              this._assetCache[assetUrl] = asset\n              const scene = asset.scene.clone()\n              controllerModel.connectModel(scene)\n            },\n            undefined,\n            () => {\n              throw new Error(`Asset ${assetUrl} missing or malformed.`)\n            }\n          )\n        }\n      })\n      .catch((err) => {\n        console.warn(err)\n      })\n  }\n}\n", "import {\n  Group,\n  Texture,\n  Object3D,\n  Mesh,\n  MeshBasicMaterial,\n  MeshLambertMaterial,\n  MeshPhongMaterial,\n  MeshStandardMaterial,\n  SphereGeometry,\n  Material\n} from 'three'\nimport { MotionController, MotionControllerConstants } from 'three-stdlib'\n\ntype MaterialsWithEnvMap = MeshBasicMaterial | MeshStandardMaterial | MeshPhongMaterial | MeshLambertMaterial\n\nconst isEnvMapApplicable = (material: Material): material is MaterialsWithEnvMap => 'envMap' in material\n\nconst updateEnvMap = (material: MaterialsWithEnvMap, envMap: Texture | null) => {\n  material.envMap = envMap\n  material.needsUpdate = true\n}\n\nconst applyEnvironmentMap = (envMap: Texture | null, obj: Object3D): void => {\n  if (obj instanceof Mesh) {\n    if (Array.isArray(obj.material)) {\n      obj.material.forEach((m) => (isEnvMapApplicable(m) ? updateEnvMap(m, envMap) : undefined))\n    } else if (isEnvMapApplicable(obj.material)) {\n      updateEnvMap(obj.material, envMap)\n    }\n  }\n}\n\ntype MaterialsWithEnvMapIntensity = Material & { envMapIntensity: any }\n\nconst isEnvMapIntensityApplicable = (material: Material): material is MaterialsWithEnvMapIntensity => 'envMapIntensity' in material\n\nconst updateEnvMapIntensity = (material: MaterialsWithEnvMapIntensity, envMapIntensity: number) => {\n  material.envMapIntensity = envMapIntensity\n  material.needsUpdate = true\n}\n\nconst applyEnvironmentMapIntensity = (envMapIntensity: number, obj: Object3D): void => {\n  if (obj instanceof Mesh) {\n    if (Array.isArray(obj.material)) {\n      obj.material.forEach((m) => (isEnvMapIntensityApplicable(m) ? updateEnvMapIntensity(m, envMapIntensity) : undefined))\n    } else if (isEnvMapIntensityApplicable(obj.material)) {\n      updateEnvMapIntensity(obj.material, envMapIntensity)\n    }\n  }\n}\n\n/**\n * Walks the model's tree to find the nodes needed to animate the components and\n * saves them to the motionContoller components for use in the frame loop. When\n * touchpads are found, attaches a touch dot to them.\n */\nfunction findNodes(motionController: MotionController, scene: Object3D): void {\n  // Loop through the components and find the nodes needed for each components' visual responses\n  Object.values(motionController.components).forEach((component) => {\n    const { type, touchPointNodeName, visualResponses } = component\n\n    if (type === MotionControllerConstants.ComponentType.TOUCHPAD && touchPointNodeName) {\n      component.touchPointNode = scene.getObjectByName(touchPointNodeName)\n      if (component.touchPointNode) {\n        // Attach a touch dot to the touchpad.\n        const sphereGeometry = new SphereGeometry(0.001)\n        const material = new MeshBasicMaterial({ color: 0x0000ff })\n        const sphere = new Mesh(sphereGeometry, material)\n        component.touchPointNode.add(sphere)\n      } else {\n        console.warn(`Could not find touch dot, ${component.touchPointNodeName}, in touchpad component ${component.id}`)\n      }\n    }\n\n    // Loop through all the visual responses to be applied to this component\n    Object.values(visualResponses).forEach((visualResponse) => {\n      const { valueNodeName, minNodeName, maxNodeName, valueNodeProperty } = visualResponse\n\n      // If animating a transform, find the two nodes to be interpolated between.\n      if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM && minNodeName && maxNodeName) {\n        visualResponse.minNode = scene.getObjectByName(minNodeName)\n        visualResponse.maxNode = scene.getObjectByName(maxNodeName)\n\n        // If the extents cannot be found, skip this animation\n        if (!visualResponse.minNode) {\n          console.warn(`Could not find ${minNodeName} in the model`)\n          return\n        }\n\n        if (!visualResponse.maxNode) {\n          console.warn(`Could not find ${maxNodeName} in the model`)\n          return\n        }\n      }\n\n      // If the target node cannot be found, skip this animation\n      visualResponse.valueNode = scene.getObjectByName(valueNodeName)\n      if (!visualResponse.valueNode) {\n        console.warn(`Could not find ${valueNodeName} in the model`)\n      }\n    })\n  })\n}\n\nfunction addAssetSceneToControllerModel(controllerModel: XRControllerModel, scene: Object3D): void {\n  // Find the nodes needed for animation and cache them on the motionController.\n  findNodes(controllerModel.motionController!, scene)\n\n  // Apply any environment map that the mesh already has set.\n  if (controllerModel.envMap || controllerModel.envMapIntensity != null) {\n    scene.traverse((c) => {\n      if (controllerModel.envMap) applyEnvironmentMap(controllerModel.envMap, c)\n      if (controllerModel.envMapIntensity != null) applyEnvironmentMapIntensity(controllerModel.envMapIntensity, c)\n    })\n  }\n\n  // Add the glTF scene to the controllerModel.\n  controllerModel.add(scene)\n}\n\nexport class XRControllerModel extends Group {\n  envMap: Texture | null\n  envMapIntensity: number\n  motionController: MotionController | null\n  scene: Object3D | null\n\n  constructor() {\n    super()\n\n    this.motionController = null\n    this.envMap = null\n    this.envMapIntensity = 1\n    this.scene = null\n  }\n\n  setEnvironmentMap(envMap: Texture | null, envMapIntensity = 1): XRControllerModel {\n    if (this.envMap === envMap && this.envMapIntensity === envMapIntensity) {\n      return this\n    }\n\n    this.envMap = envMap\n    this.envMapIntensity = envMapIntensity\n    this.scene?.traverse((c) => {\n      applyEnvironmentMap(envMap, c)\n      applyEnvironmentMapIntensity(envMapIntensity, c)\n    })\n\n    return this\n  }\n\n  setEnvironmentMapIntensity(envMapIntensity: number): XRControllerModel {\n    if (this.envMapIntensity === envMapIntensity) {\n      return this\n    }\n\n    this.envMapIntensity = envMapIntensity\n    this.scene?.traverse((c) => applyEnvironmentMapIntensity(envMapIntensity, c))\n\n    return this\n  }\n\n  connectModel(scene: Object3D): void {\n    if (!this.motionController) {\n      console.warn('scene tried to add, but no motion controller')\n      return\n    }\n\n    this.scene = scene\n    addAssetSceneToControllerModel(this, scene)\n    this.dispatchEvent({\n      type: 'modelconnected',\n      data: scene\n    })\n  }\n\n  connectMotionController(motionController: MotionController): void {\n    this.motionController = motionController\n    this.dispatchEvent({\n      type: 'motionconnected',\n      data: motionController\n    })\n  }\n\n  /**\n   * Polls data from the XRInputSource and updates the model's components to match\n   * the real world data\n   */\n  updateMatrixWorld(force: boolean): void {\n    super.updateMatrixWorld(force)\n\n    if (!this.motionController) return\n\n    // Cause the MotionController to poll the Gamepad for data\n    this.motionController.updateFromGamepad()\n\n    // Update the 3D model to reflect the button, thumbstick, and touchpad state\n    Object.values(this.motionController.components).forEach((component) => {\n      // Update node data based on the visual responses' current states\n      Object.values(component.visualResponses).forEach((visualResponse) => {\n        const { valueNode, minNode, maxNode, value, valueNodeProperty } = visualResponse\n\n        // Skip if the visual response node is not found. No error is needed,\n        // because it will have been reported at load time.\n        if (!valueNode) return\n\n        // Calculate the new properties based on the weight supplied\n        if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY && typeof value === 'boolean') {\n          valueNode.visible = value\n        } else if (\n          valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM &&\n          minNode &&\n          maxNode &&\n          typeof value === 'number'\n        ) {\n          valueNode.quaternion.slerpQuaternions(minNode.quaternion, maxNode.quaternion, value)\n\n          valueNode.position.lerpVectors(minNode.position, maxNode.position, value)\n        }\n      })\n    })\n  }\n\n  disconnect(): void {\n    this.dispatchEvent({\n      type: 'motiondisconnected',\n      data: this.motionController\n    })\n    this.dispatchEvent({\n      type: 'modeldisconnected',\n      data: this.scene\n    })\n    this.motionController = null\n    if (this.scene) {\n      this.remove(this.scene)\n    }\n    this.scene = null\n  }\n\n  dispose(): void {\n    this.disconnect()\n  }\n}\n", "import * as React from 'react'\nimport * as THREE from 'three'\nimport { useFrame, Object3DNode, extend, createPortal } from '@react-three/fiber'\nimport { useXR } from './XR'\nimport { XRController } from './XRController'\nimport { XRControllerModelFactory } from './XRControllerModelFactory'\nimport { XRControllerModel } from './XRControllerModel'\nimport { useCallbackRef } from './utils'\n\nexport interface RayProps extends Partial<JSX.IntrinsicElements['object3D']> {\n  /** The XRController to attach the ray to */\n  target: XRController\n  /** Whether to hide the ray on controller blur. Default is `false` */\n  hideOnBlur?: boolean\n}\n\nexport const Ray = React.forwardRef<THREE.Line, RayProps>(function Ray({ target, hideOnBlur = false, ...props }, forwardedRef) {\n  const hoverState = useXR((state) => state.hoverState)\n  const ray = React.useRef<THREE.Line>(null!)\n  const rayGeometry = React.useMemo(\n    () => new THREE.BufferGeometry().setFromPoints([new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, 0, -1)]),\n    []\n  )\n  React.useImperativeHandle(forwardedRef, () => ray.current)\n\n  // Show ray line when hovering objects\n  useFrame(() => {\n    if (!target.inputSource) {\n      return\n    }\n\n    let rayLength = 1\n\n    const intersection: THREE.Intersection = hoverState[target.inputSource.handedness].values().next().value\n    if (intersection && target.inputSource.handedness !== 'none') {\n      rayLength = intersection.distance\n      if (hideOnBlur) ray.current.visible = false\n    } else if (hideOnBlur) {\n      ray.current.visible = true\n    }\n\n    // Tiny offset to clip ray on AR devices\n    // that don't have handedness set to 'none'\n    const offset = -0.01\n    ray.current.scale.z = rayLength + offset\n  })\n\n  // @ts-ignore TS assumes that JS is for the web, and overrides line w/SVG props\n  return <line ref={ray} geometry={rayGeometry} material-opacity={0.8} material-transparent={true} {...props} />\n})\n\nconst modelFactory = new XRControllerModelFactory()\n\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      xRControllerModel: Object3DNode<XRControllerModel, typeof XRControllerModel>\n    }\n  }\n}\n\nexport interface ControllersProps {\n  /** Optional material props to pass to controllers' ray indicators */\n  rayMaterial?: JSX.IntrinsicElements['meshBasicMaterial']\n  /** Whether to hide controllers' rays on blur. Default is `false` */\n  hideRaysOnBlur?: boolean\n  /**\n   * Optional environment map to apply to controller models.\n   * Useful for make controllers look more realistic\n   * if you don't want to apply an env map globally on a scene\n   */\n  envMap?: THREE.Texture\n  /**\n   * Optional environment map intensity to apply to controller models.\n   * Useful for tweaking the env map intensity if they look too bright or dark\n   */\n  envMapIntensity?: number\n}\n\nconst ControllerModel = ({\n  target,\n  envMap,\n  envMapIntensity\n}: {\n  target: XRController\n  envMap?: THREE.Texture\n  envMapIntensity?: number\n}) => {\n  const xrControllerModelRef = React.useRef<XRControllerModel | null>(null)\n  const setEnvironmentMapRef = useCallbackRef((xrControllerModel: XRControllerModel) => {\n    if (envMap == null) return\n    xrControllerModel.setEnvironmentMap(envMap)\n  })\n  const clearEnvironmentMapRef = useCallbackRef((xrControllerModel: XRControllerModel) => xrControllerModel.setEnvironmentMap(null))\n\n  const setEnvironmentMapIntensityRef = useCallbackRef((xrControllerModel: XRControllerModel) => {\n    if (envMapIntensity == null) return\n    xrControllerModel.setEnvironmentMapIntensity(envMapIntensity)\n  })\n\n  const handleControllerModel = React.useCallback(\n    (xrControllerModel: XRControllerModel | null) => {\n      xrControllerModelRef.current = xrControllerModel\n      if (xrControllerModel) {\n        target.xrControllerModel = xrControllerModel\n        if (target.inputSource?.hand) {\n          return\n        }\n\n        setEnvironmentMapRef.current(xrControllerModel)\n        setEnvironmentMapIntensityRef.current(xrControllerModel)\n        if (target.inputSource) {\n          modelFactory.initializeControllerModel(xrControllerModel, target.inputSource)\n        } else {\n          console.warn('no input source on XRController when handleControllerModel')\n        }\n      } else {\n        if (target.inputSource?.hand) {\n          return\n        }\n        target.xrControllerModel?.disconnect()\n        target.xrControllerModel = null\n      }\n    },\n    [target, setEnvironmentMapIntensityRef, setEnvironmentMapRef]\n  )\n\n  React.useLayoutEffect(() => {\n    if (xrControllerModelRef.current) {\n      if (envMap) {\n        setEnvironmentMapRef.current(xrControllerModelRef.current)\n      } else {\n        clearEnvironmentMapRef.current(xrControllerModelRef.current)\n      }\n    }\n  }, [envMap, setEnvironmentMapRef, clearEnvironmentMapRef])\n\n  React.useLayoutEffect(() => {\n    if (xrControllerModelRef.current) {\n      setEnvironmentMapIntensityRef.current(xrControllerModelRef.current)\n    }\n  }, [envMapIntensity, setEnvironmentMapIntensityRef])\n\n  return <xRControllerModel ref={handleControllerModel} />\n}\n\nexport function Controllers({ rayMaterial = {}, hideRaysOnBlur = false, envMap, envMapIntensity }: ControllersProps) {\n  const controllers = useXR((state) => state.controllers)\n  const isHandTracking = useXR((state) => state.isHandTracking)\n  const rayMaterialProps = React.useMemo(\n    () =>\n      Object.entries(rayMaterial).reduce(\n        (acc, [key, value]) => ({\n          ...acc,\n          [`material-${key}`]: value\n        }),\n        {}\n      ),\n    [JSON.stringify(rayMaterial)] // eslint-disable-line react-hooks/exhaustive-deps\n  )\n  React.useMemo(() => extend({ XRControllerModel }), [])\n\n  return (\n    <>\n      {controllers.map((target, i) => (\n        <React.Fragment key={i}>\n          {createPortal(<ControllerModel target={target} envMap={envMap} envMapIntensity={envMapIntensity} />, target.grip)}\n          {createPortal(\n            <Ray visible={!isHandTracking} hideOnBlur={hideRaysOnBlur} target={target} {...rayMaterialProps} />,\n            target.controller\n          )}\n        </React.Fragment>\n      ))}\n    </>\n  )\n}\n", "import { Object3D } from 'three'\nimport { GLTFLoader } from 'three-stdlib'\n\nconst DEFAULT_HAND_PROFILE_PATH = 'https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles/generic-hand/'\n\nclass XRHandMeshModel {\n  controller: Object3D\n  handModel: Object3D\n  bones: Object3D[]\n  scene?: Object3D\n\n  constructor(\n    handModel: Object3D,\n    controller: Object3D,\n    path: string = DEFAULT_HAND_PROFILE_PATH,\n    handedness: string,\n    customModelPath?: string\n  ) {\n    this.controller = controller\n    this.handModel = handModel\n\n    this.bones = []\n\n    const loader = new GLTFLoader()\n    if (!customModelPath) loader.setPath(path)\n    loader.load(customModelPath ?? `${handedness}.glb`, (gltf: { scene: Object3D }) => {\n      const object = gltf.scene.children[0]\n      this.handModel.add(object)\n      this.scene = object\n\n      const mesh = object.getObjectByProperty('type', 'SkinnedMesh')!\n      mesh.frustumCulled = false\n      mesh.castShadow = true\n      mesh.receiveShadow = true\n\n      const joints = [\n        'wrist',\n        'thumb-metacarpal',\n        'thumb-phalanx-proximal',\n        'thumb-phalanx-distal',\n        'thumb-tip',\n        'index-finger-metacarpal',\n        'index-finger-phalanx-proximal',\n        'index-finger-phalanx-intermediate',\n        'index-finger-phalanx-distal',\n        'index-finger-tip',\n        'middle-finger-metacarpal',\n        'middle-finger-phalanx-proximal',\n        'middle-finger-phalanx-intermediate',\n        'middle-finger-phalanx-distal',\n        'middle-finger-tip',\n        'ring-finger-metacarpal',\n        'ring-finger-phalanx-proximal',\n        'ring-finger-phalanx-intermediate',\n        'ring-finger-phalanx-distal',\n        'ring-finger-tip',\n        'pinky-finger-metacarpal',\n        'pinky-finger-phalanx-proximal',\n        'pinky-finger-phalanx-intermediate',\n        'pinky-finger-phalanx-distal',\n        'pinky-finger-tip'\n      ]\n\n      joints.forEach((jointName) => {\n        const bone = object.getObjectByName(jointName) as any\n\n        if (bone !== undefined) {\n          bone.jointName = jointName\n        } else {\n          console.warn(`Couldn't find ${jointName} in ${handedness} hand mesh`)\n        }\n\n        this.bones.push(bone)\n      })\n    })\n  }\n\n  updateMesh(): void {\n    // XR Joints\n    const XRJoints = (this.controller as any).joints\n    let allInvisible = true\n\n    for (let i = 0; i < this.bones.length; i++) {\n      const bone = this.bones[i]\n\n      if (bone) {\n        const XRJoint = XRJoints[(bone as any).jointName]\n\n        if (XRJoint.visible) {\n          const position = XRJoint.position\n          bone.position.copy(position)\n          bone.quaternion.copy(XRJoint.quaternion)\n          allInvisible = false\n        }\n      }\n    }\n\n    // Hide hand mesh if all joints are invisible in case hand loses tracking\n    if (allInvisible && this.scene) {\n      this.scene.visible = false\n    } else if (this.scene) {\n      this.scene.visible = true\n    }\n  }\n\n  dispose(): void {\n    if (this.scene) {\n      this.handModel.remove(this.scene)\n    }\n  }\n}\n\nexport { XRHandMeshModel }\n", "import { Object3D, Sphere, Box3, Mesh, Texture, Vector3, EventListener, Event } from 'three'\nimport { XRHandMeshModel } from './XRHandMeshModel'\nconst TOUCH_RADIUS = 0.01\nconst POINTING_JOINT = 'index-finger-tip'\n\nexport interface XRButton extends Object3D {\n  onPress(): void\n  onClear(): void\n  isPressed(): boolean\n  whilePressed(): void\n}\n\nclass OculusHandModel extends Object3D {\n  controller: Object3D\n  motionController: XRHandMeshModel | null\n  envMap: Texture | null\n  mesh: Mesh | null\n  xrInputSource: XRInputSource | null\n\n  leftModelPath?: string\n  rightModelPath?: string\n\n  constructor(controller: Object3D, leftModelPath?: string, rightModelPath?: string) {\n    super()\n\n    this.controller = controller\n    this.motionController = null\n    this.envMap = null\n    this.leftModelPath = leftModelPath\n    this.rightModelPath = rightModelPath\n\n    this.mesh = null\n    this.xrInputSource = null\n\n    controller.addEventListener('connected', this._onConnected)\n    controller.addEventListener('disconnected', this._onDisconnected)\n  }\n\n  private _onConnected: EventListener<Event, 'connected', Object3D<Event>> = (event) => {\n    const xrInputSource = event.data\n\n    if (xrInputSource.hand && !this.motionController) {\n      this.xrInputSource = xrInputSource\n\n      this.motionController = new XRHandMeshModel(\n        this,\n        this.controller,\n        undefined,\n        xrInputSource.handedness,\n        xrInputSource.handedness === 'left' ? this.leftModelPath : this.rightModelPath\n      )\n    }\n  }\n\n  private _onDisconnected: EventListener<Event, 'disconnected', Object3D<Event>> = () => {\n    if (!this.xrInputSource?.hand) {\n      return;\n    }\n    this.motionControllerCleanup()\n  }\n\n  private motionControllerCleanup(): void {\n    this.clear()\n    this.motionController?.dispose()\n    this.motionController = null\n  }\n\n  updateMatrixWorld(force?: boolean): void {\n    super.updateMatrixWorld(force)\n\n    if (this.motionController) {\n      this.motionController.updateMesh()\n    }\n  }\n\n  getPointerPosition(): Vector3 | null {\n    // @ts-ignore XRController needs to extend Group\n    const indexFingerTip = this.controller.joints[POINTING_JOINT]\n    if (indexFingerTip) {\n      return indexFingerTip.position\n    } else {\n      return null\n    }\n  }\n\n  intersectBoxObject(boxObject: Object3D): boolean {\n    const pointerPosition = this.getPointerPosition()\n    if (pointerPosition) {\n      const indexSphere = new Sphere(pointerPosition, TOUCH_RADIUS)\n      const box = new Box3().setFromObject(boxObject)\n      return indexSphere.intersectsBox(box)\n    } else {\n      return false\n    }\n  }\n\n  checkButton(button: XRButton): void {\n    if (this.intersectBoxObject(button)) {\n      button.onPress()\n    } else {\n      button.onClear()\n    }\n\n    if (button.isPressed()) {\n      button.whilePressed()\n    }\n  }\n\n  dispose(): void {\n    this.motionControllerCleanup()\n\n    this.controller.removeEventListener('connected', this._onConnected)\n    this.controller.removeEventListener('disconnected', this._onDisconnected)\n  }\n}\n\nexport { OculusHandModel }\n", "import * as React from 'react'\nimport { Object3DNode, extend, createPortal } from '@react-three/fiber'\nimport { OculusHandModel } from './OculusHandModel'\nimport { useXR } from './XR'\nimport { useIsomorphicLayoutEffect } from './utils'\n\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      oculusHandModel: Object3DNode<OculusHandModel, typeof OculusHandModel>\n    }\n  }\n}\n\nexport interface HandsProps {\n  modelLeft?: string\n  modelRight?: string\n}\nexport function Hands({ modelLeft, modelRight }: HandsProps) {\n  const controllers = useXR((state) => state.controllers)\n  React.useMemo(() => extend({ OculusHandModel }), [])\n\n  // Send fake connected event (no-op) so models start loading\n  useIsomorphicLayoutEffect(() => {\n    for (const target of controllers) {\n      target.hand.dispatchEvent({ type: 'connected', data: target.inputSource, fake: true })\n    }\n  }, [controllers, modelLeft, modelRight])\n\n  return <>{controllers.map(({ hand }) => createPortal(<oculusHandModel args={[hand, modelLeft, modelRight]} />, hand))}</>\n}\n", "import * as THREE from 'three'\nimport * as React from 'react'\nimport { useFrame, useThree } from '@react-three/fiber'\nimport { Interactive, type XRInteractionEvent } from './Interactions'\n\nconst _q = /* @__PURE__ */ new THREE.Quaternion()\n\n/**\n * Teleport callback, accepting a world-space target position to teleport to.\n */\nexport type TeleportCallback = (target: THREE.Vector3 | THREE.Vector3Tuple) => void\n\n/**\n * Returns a {@link TeleportCallback} to teleport the player to a position.\n */\nexport function useTeleportation(): TeleportCallback {\n  const frame = React.useRef<XRFrame>()\n  const baseReferenceSpace = React.useRef<XRReferenceSpace | null>(null)\n  const teleportReferenceSpace = React.useRef<XRReferenceSpace | null>(null)\n\n  useFrame((state, _, xrFrame) => {\n    frame.current = xrFrame\n\n    const referenceSpace = state.gl.xr.getReferenceSpace()\n    baseReferenceSpace.current ??= referenceSpace\n\n    const teleportOffset = teleportReferenceSpace.current\n    if (teleportOffset && referenceSpace !== teleportOffset) {\n      state.gl.xr.setReferenceSpace(teleportOffset)\n    }\n  })\n\n  return React.useCallback((target) => {\n    const base = baseReferenceSpace.current\n    if (base) {\n      const [x, y, z] = Array.from(target as THREE.Vector3Tuple)\n      const offsetFromBase = { x: -x, y: -y, z: -z }\n\n      const pose = frame.current?.getViewerPose(base)\n      if (pose) {\n        offsetFromBase.x += pose.transform.position.x\n        offsetFromBase.z += pose.transform.position.z\n      }\n\n      const teleportOffset = new XRRigidTransform(offsetFromBase, _q)\n      teleportReferenceSpace.current = base.getOffsetReferenceSpace(teleportOffset)\n    }\n  }, [])\n}\n\nexport interface TeleportationPlaneProps extends Partial<JSX.IntrinsicElements['group']> {\n  /** Whether to allow teleportation from left controller. Default is `false` */\n  leftHand?: boolean\n  /** Whether to allow teleportation from right controller. Default is `false` */\n  rightHand?: boolean\n  /** The maximum distance from the camera to the teleportation point. Default is `10` */\n  maxDistance?: number\n  /** The radial size of the teleportation marker. Default is `0.25` */\n  size?: number\n}\n\n/**\n * Creates a teleportation plane with a marker that will teleport on interaction.\n */\nexport const TeleportationPlane = React.forwardRef<THREE.Group, TeleportationPlaneProps>(function TeleportationPlane(\n  { leftHand = false, rightHand = false, maxDistance = 10, size = 0.25, ...props },\n  ref\n) {\n  const teleport = useTeleportation()\n  const marker = React.useRef<THREE.Mesh>(null!)\n  const intersection = React.useRef<THREE.Vector3>()\n  const camera = useThree((state) => state.camera)\n\n  const isInteractive = React.useCallback(\n    (e: XRInteractionEvent): boolean => {\n      const handedness = e.target.inputSource?.handedness\n      return !!((handedness !== 'left' || leftHand) && (handedness !== 'right' || rightHand))\n    },\n    [leftHand, rightHand]\n  )\n\n  return (\n    <group ref={ref} {...props}>\n      <mesh ref={marker} visible={false} rotation-x={-Math.PI / 2}>\n        <circleGeometry args={[size, 32]} />\n        <meshBasicMaterial color=\"white\" />\n      </mesh>\n      <Interactive\n        onMove={(e) => {\n          if (!isInteractive(e) || !e.intersection) return\n\n          const distanceFromCamera = e.intersection.point.distanceTo(camera.position)\n          marker.current.visible = distanceFromCamera <= maxDistance\n          marker.current.scale.setScalar(1)\n\n          intersection.current = e.intersection.point\n          marker.current.position.copy(intersection.current)\n        }}\n        onHover={(e) => {\n          if (!isInteractive(e) || !e.intersection) return\n\n          const distanceFromCamera = e.intersection.point.distanceTo(camera.position)\n          marker.current.visible = distanceFromCamera <= maxDistance\n          marker.current.scale.setScalar(1)\n        }}\n        onBlur={(e) => {\n          if (!isInteractive(e)) return\n          marker.current.visible = false\n        }}\n        onSelectStart={(e) => {\n          if (!isInteractive(e) || !e.intersection) return\n\n          const distanceFromCamera = e.intersection.point.distanceTo(camera.position)\n          marker.current.visible = distanceFromCamera <= maxDistance\n          marker.current.scale.setScalar(1.1)\n        }}\n        onSelectEnd={(e) => {\n          if (!isInteractive(e) || !intersection.current) return\n\n          marker.current.visible = true\n          marker.current.scale.setScalar(1)\n\n          const distanceFromCamera = intersection.current.distanceTo(camera.position)\n          if (distanceFromCamera <= maxDistance) {\n            teleport(intersection.current)\n          }\n        }}\n      >\n        <mesh rotation-x={-Math.PI / 2} visible={false} scale={1000}>\n          <planeGeometry />\n        </mesh>\n      </Interactive>\n    </group>\n  )\n})\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMa,IAAA,eAAA,cAA2B,MAAM;EAQ5C,YAAY,OAAe,IAAyB;AAC5C,UAAA;AAJR,SAAO,cAAoC;AAC3C,SAAO,oBAA8C;AAKnD,SAAK,QAAQ;AACb,SAAK,aAAa,GAAG,GAAG,cAAc,KAAK;AAC3C,SAAK,OAAO,GAAG,GAAG,kBAAkB,KAAK;AACzC,SAAK,OAAO,GAAG,GAAG,QAAQ,KAAK;AAE1B,SAAA,KAAK,SAAS,OAAO;AACrB,SAAA,WAAW,SAAS,OAAO;AAC3B,SAAA,KAAK,SAAS,OAAO;AAE1B,SAAK,UAAU;AACf,SAAK,IAAI,KAAK,YAAY,KAAK,MAAM,KAAK,IAAI;AAE9C,SAAK,eAAe,KAAK,aAAa,KAAK,IAAI;AAC/C,SAAK,kBAAkB,KAAK,gBAAgB,KAAK,IAAI;AAErD,SAAK,WAAW,iBAAiB,aAAa,KAAK,YAAY;AAC/D,SAAK,WAAW,iBAAiB,gBAAgB,KAAK,eAAe;EACvE;EAEA,aAAa,OAA0B;AACrC,QAAI,MAAM;AAAM;AAChB,QAAI,CAAC,MAAM;AAAM;AAEjB,SAAK,UAAU;AACf,SAAK,cAAc,MAAM;AACzB,SAAK,cAAc,KAAK;EAC1B;EAEA,gBAAgB,OAA0B;AACxC,QAAI,MAAM;AAAM;AAEhB,SAAK,UAAU;AACf,SAAK,cAAc;AACnB,SAAK,cAAc,KAAK;EAC1B;EAEA,UAAU;AACR,SAAK,WAAW,oBAAoB,aAAa,KAAK,YAAY;AAClE,SAAK,WAAW,oBAAoB,gBAAgB,KAAK,eAAe;EAC1E;AACF;;;;;;;;;ACpDa,IAAA,OAAO,CAAI,QAAkB,MAAM,KAAK,IAAI,IAAO,GAAG,CAAC;AAW7D,IAAM,4BACX,OAAO,WAAW,kBAAgB,KAAA,OAAO,aAAP,OAAA,SAAA,GAAiB,oBAAiB,KAAA,OAAO,cAAP,OAAA,SAAA,GAAkB,aAAY,iBACxF,wBACA;AAKL,SAAS,eAAkB,IAAkC;AAC5D,QAAA,MAAY,aAAU,EAAE;AAC9B,4BAA0B,MAAM,MAAM,IAAI,UAAU,KAAK,CAAC,EAAE,CAAC;AACtD,SAAA;AACT;;;ACFO,SAAS,WAAW,OAA8B,SAA4C,EAAE,WAAW,IAAoB,CAAA,GAAI;AAClI,QAAA,aAAa,eAAe,OAAO;AACzC,QAAM,cAAc,MAAM,CAAC,UAAU,MAAM,WAAW;AAEtD,4BAA0B,MAAM;AAC9B,UAAM,YAAY,YAAY,IAAI,CAAC,WAAW;AAC5C,UAAI,cAAc,OAAO,eAAe,OAAO,YAAY,eAAe;AAAY;AAEhF,YAAA,WAAW,CAAC,gBAAmC,WAAW,QAAQ,EAAE,aAAa,OAAA,CAAQ;AACxF,aAAA,WAAW,iBAAiB,OAAO,QAAQ;AAClD,aAAO,MAAM,OAAO,WAAW,oBAAoB,OAAO,QAAQ;IAAA,CACnE;AAED,WAAO,MAAM,UAAU,QAAQ,CAAC,YAAY,WAAA,OAAA,SAAA,QAAA,CAAW;EACtD,GAAA,CAAC,aAAa,YAAY,KAAK,CAAC;AACrC;;;ACZA,IAAM,aAAa,IAAU,QAAA;AAEb,SAAA,mBAAmB,EAAE,SAAA,GAA2C;AAC9E,QAAM,SAAS,SAAS,CAAC,UAAU,MAAM,MAAM;AAC/C,QAAM,MAAM,SAAS,CAAC,UAAU,MAAM,GAAG;AACzC,QAAM,YAAY,SAAS,CAAC,UAAU,MAAM,SAAS;AACrD,QAAM,cAAc,MAAM,CAAC,UAAU,MAAM,WAAW;AACtD,QAAM,eAAe,MAAM,CAAC,UAAU,MAAM,YAAY;AACxD,QAAM,aAAa,MAAM,CAAC,UAAU,MAAM,UAAU;AACpD,QAAM,iBAAiB,MAAM,CAAC,UAAU,MAAM,cAAc;AAC5D,QAAM,iBAAiB,MAAM,CAAC,UAAU,MAAM,cAAc;AAE5D,QAAM,YAAkB;IACtB,CAAC,eAA+B;AAC9B,YAAM,UAAU,MAAM,KAAK,aAAa,KAAM,CAAA;AAC9C,iBAAW,SAAS,EAAE,gBAAgB,WAAW,WAAW;AAC5D,gBAAU,IAAI,OAAO,sBAAsB,WAAW,WAAW;AACvD,gBAAA,IAAI,UAAU,IAAI,GAAG,GAAG,EAAE,EAAE,aAAa,UAAU;AAEtD,aAAA,UAAU,iBAAiB,SAAS,IAAI;IACjD;IACA,CAAC,cAAc,SAAS;EAAA;AAI1B,WAAS,MAAM;;AACb,QAAI,aAAa,SAAS;AAAG;AAE7B,eAAW,UAAU,aAAa;AAC5B,UAAA,GAACA,MAAA,OAAO,gBAAP,OAAA,SAAAA,IAAoB,aAAY;AACnC;MACF;AACM,YAAA,WAAW,WAAW,OAAO,YAAY,UAAA;AACzC,YAAA,OAAA,oBAAW,IAAA;AACb,UAAA,gBAAgB,UAAU,OAAO,UAAU;AAE/C,UAAI,OAAO,QAAQ;AAGjB,wBAAgB,OAAO,OAAO,eAAe,IAAK,CAAA;MAAA,OAC7C;AAEL,cAAM,MAAM,cAAc,KAAK,CAAC,MAAM,KAAA,OAAA,SAAA,EAAG,MAAM;AAC3C,YAAA;AAAK,0BAAgB,CAAC,GAAG;MAC/B;AAEA,iBAAW,gBAAgB,eAAe;AACxC,YAAI,cAAqC,aAAa;AAEtD,eAAO,aAAa;AACd,cAAA,eAAe,aAAa,SAAS,KAAK,CAAC,SAAS,IAAI,WAAW,GAAG;AAClE,kBAAA,WAAW,eAAe,aAAa,SAAS;AACtD,uBAAW,WAAW,UAAU;AAC9B,sBAAQ,EAAE,QAAQ,cAAc,cAAe,CAAA;YACjD;UACF;AAEM,gBAAA,eAAe,eAAe,aAAa,QAAQ;AAC3C,0BAAA,OAAA,SAAA,aAAA,QAAQ,CAAC,YAAY,QAAQ,EAAE,QAAQ,cAAc,cAAe,CAAA,CAAA;AAEzE,mBAAA,IAAI,aAAa,YAAY;AACjC,eAAA,IAAI,YAAY,EAAE;AACvB,wBAAc,YAAY;QAC5B;MACF;AAIW,iBAAA,eAAe,SAAS,KAAA,GAAQ;AACzC,YAAI,CAAC,KAAK,IAAI,YAAY,EAAE,GAAG;AAC7B,mBAAS,OAAO,WAAW;AAErB,gBAAA,WAAW,eAAe,aAAa,QAAQ;AACrD,cAAI,CAAC;AAAU;AAEf,qBAAW,WAAW,UAAU;AACtB,oBAAA,EAAE,QAAQ,cAAA,CAAe;UACnC;QACF;MACF;IACF;EAAA,CACD;AAED,QAAM,eAAqB;IACzB,CAAC,gBAAmC,CAAC,MAAkC;;AACrE,UAAI,GAACA,MAAA,EAAE,OAAO,gBAAT,OAAA,SAAAA,IAAsB,aAAY;AACrC;MACF;AACA,YAAM,WAAW,WAAW,EAAE,OAAO,YAAY,UAAA;AAC3C,YAAA,gBAAgB,MAAM,KAAK,IAAI,IAAI,SAAS,OAAQ,CAAA,CAAC;AAE9C,mBAAA,QAAQ,CAAC,UAAU,WAAW;;AACrC,YAAA,SAAS,IAAI,MAAM,GAAG;AACxB,cAAI,CAAC,SAAS,WAAA;AAAc;AAEjB,qBAAA,WAAW,SAAS,WAAA,GAAc;AACnC,aAAAA,OAAA,QAAA,YAAA,OAAA,SAAAA,KAAA,KAAA,SAAU,EAAE,QAAQ,EAAE,QAAQ,cAAc,SAAS,IAAI,MAAM,GAAG,cAAe,CAAA;UAC3F;QAAA,OACK;AACD,cAAA,gBAAgB,cAAc,SAAS,gBAAA,GAAmB;AACjD,uBAAA,WAAW,SAAS,gBAAA,GAAmB;AAChD,eAAAC,MAAA,QAAQ,YAAR,OAAA,SAAAA,IAAA,KAAA,SAAkB,EAAE,QAAQ,EAAE,QAAQ,cAAA,CAAA;YACxC;UACS,WAAA,gBAAgB,eAAe,SAAS,iBAAA,GAAoB;AAC1D,uBAAA,WAAW,SAAS,iBAAA,GAAoB;AACjD,eAAA,KAAA,QAAQ,YAAR,OAAA,SAAA,GAAA,KAAA,SAAkB,EAAE,QAAQ,EAAE,QAAQ,cAAA,CAAA;YACxC;UACF;QACF;MAAA,CACD;IACH;IACA,CAAC,YAAY,YAAY;EAAA;AAGhB,aAAA,UAAU,aAAa,UAAU,CAAC;AAClC,aAAA,eAAe,aAAa,eAAe,CAAC;AAC5C,aAAA,aAAa,aAAa,aAAa,CAAC;AACxC,aAAA,WAAW,aAAa,WAAW,CAAC;AACpC,aAAA,cAAc,aAAa,cAAc,CAAC;AAC1C,aAAA,gBAAgB,aAAa,gBAAgB,CAAC;AAEzD,SAAA,qBAAA,iBAAA,MAAU,QAAS;AACrB;AAEgB,SAAA,eAAe,KAAsC,MAAyB,SAAgC;AAC5H,QAAM,iBAAiB,MAAM,CAAC,UAAU,MAAM,cAAc;AAC5D,QAAM,oBAAoB,MAAM,CAAC,UAAU,MAAM,iBAAiB;AAC5D,QAAA,aAAa,eAAe,OAAO;AAEzC,4BAA0B,MAAM;AAC9B,UAAM,SAAS,IAAI;AACf,QAAA,CAAC,UAAU,CAAC,WAAW;AAAS;AAErB,mBAAA,QAAQ,MAAM,UAAmD;AAEhF,WAAO,MAAM,kBAAkB,QAAQ,MAAM,UAAmD;EAAA,GAC/F,CAAC,KAAK,MAAM,gBAAgB,iBAAiB,CAAC;AACnD;AAgBO,IAAM,cAAoB,kBAA0C,SAASC,aAClF;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF,GACA,WACA;AACM,QAAA,MAAY,cAAoB,IAAK;AAC3C,EAAM,2BAAoB,WAAW,MAAM,IAAI,OAAO;AAEvC,iBAAA,KAAK,WAAW,OAAO;AACvB,iBAAA,KAAK,UAAU,MAAM;AACrB,iBAAA,KAAK,iBAAiB,aAAa;AACnC,iBAAA,KAAK,eAAe,WAAW;AAC/B,iBAAA,KAAK,kBAAkB,cAAc;AACrC,iBAAA,KAAK,YAAY,QAAQ;AACzB,iBAAA,KAAK,kBAAkB,cAAc;AACrC,iBAAA,KAAK,gBAAgB,YAAY;AACjC,iBAAA,KAAK,mBAAmB,eAAe;AACvC,iBAAA,KAAK,aAAa,SAAS;AAC3B,iBAAA,KAAK,UAAU,MAAM;AAEpC,SAAQ,qBAAA,SAAA;IAAM;EAAA,GAAW,QAAS;AACpC,CAAC;AAGY,IAAA,UAAgB,kBAAsC,SAASC,SAC1E,EAAE,eAAe,aAAa,UAAA,GAAa,KAAK,GAChD,cACA;AACM,QAAA,qBAA2B,cAAA;AAC3B,QAAA,WAAiB,cAAoB,IAAK;AAC1C,QAAA,oBAA0B,eAAQ,MAAM,IAAU,QAAA,GAAW,CAAA,CAAE;AACrE,EAAM,2BAAoB,cAAc,MAAM,SAAS,OAAO;AAE9D,WAAS,MAAM;AACb,UAAM,aAAa,mBAAmB;AACtC,UAAM,QAAQ,SAAS;AACvB,QAAI,CAAC;AAAY;AAEjB,UAAM,aAAa,iBAAiB;AAC9B,UAAA,aAAa,WAAW,WAAW;AACzC,UAAM,kBAAkB;AAExB,sBAAkB,KAAK,WAAW,WAAW,EAAE,OAAO;EAAA,CACvD;AAED,SACG,qBAAA,aAAA;IACC,KAAK;IACL,eAAe,CAAC,MAAM;AACD,yBAAA,UAAU,EAAE,OAAO;AACtC,wBAAkB,KAAK,EAAE,OAAO,WAAW,WAAW,EAAE,OAAA;AACxD,uBAAA,OAAA,SAAA,cAAgB,CAAA;IAClB;IACA,aAAa,CAAC,MAAM;AAClB,UAAI,EAAE,OAAO,eAAe,mBAAmB,SAAS;AACtD,2BAAmB,UAAU;MAC/B;AACA,qBAAA,OAAA,SAAA,YAAc,CAAA;IAChB;IACC,GAAG;EAAA,GAEH,QACH;AAEJ,CAAC;AAIM,SAAS,WAAW,iBAAkC;AAC3D,QAAM,UAAU,MAAM,CAAC,UAAU,MAAM,OAAO;AACxC,QAAA,gBAAsB,cAAA;AACtB,QAAA,YAAkB,eAAQ,MAAM,IAAU,QAAA,GAAW,CAAA,CAAE;AAE7D,4BAA0B,MAAM;AAC9B,QAAI,CAAC;AAAgB,aAAA,MAAM,cAAc,UAAU;AAEnD,YAAQ,sBAAsB,QAAQ,EAAE,KAAK,OAAO,mBAAmB;;AACrE,oBAAc,UAAU,QAAMH,MAAA,WAAA,OAAA,SAAA,QAAS,yBAAT,OAAA,SAAAA,IAAA,KAAA,SAAgC,EAAE,OAAO,eAAA,CAAA;IAAgB,CACxF;EAAA,GACA,CAAC,OAAO,CAAC;AAEH,WAAA,CAAC,OAAO,GAAG,UAAmB;AACjC,QAAA,CAAC,SAAS,CAAC,cAAc;AAAS;AAEtC,UAAM,CAAC,GAAG,IAAI,MAAM,kBAAkB,cAAc,OAAO;AAC3D,QAAI,KAAK;AACP,YAAM,iBAAiB,MAAM,GAAG,GAAG,kBAAkB;AAC/C,YAAA,OAAO,IAAI,QAAQ,cAAc;AAEvC,UAAI,MAAM;AACE,kBAAA,UAAU,KAAK,UAAU,MAAM;AACzC,wBAAgB,WAAW,GAAG;MAChC;IACF;EAAA,CACD;AACH;;;;ACtQa,IAAA,YAAkB,qBAAsC,IAAK;;;ACX1E,IAAM,qBAAqB,OAA2B,CAAC,KAAK,SAAS,EAAE,KAAK,KAAK,SAAS,MAAM,oBAAoB,KAAA,EAAO;AAmC3H,SAAS,UAAU;EACjB,YAAY;EACZ,YAAY;EACZ,iBAAiB;EACjB;EACA;EACA;EACA;EACA;AACF,GAAY;AACV,QAAM,KAAK,SAAS,CAAC,UAAU,MAAM,EAAE;AACvC,QAAM,SAAS,SAAS,CAAC,UAAU,MAAM,MAAM;AAC/C,QAAM,SAAS,MAAM,CAAC,UAAU,MAAM,MAAM;AAC5C,QAAM,MAAM,MAAM,CAAC,UAAU,MAAM,GAAG;AACtC,QAAM,MAAM,MAAM,CAAC,UAAU,MAAM,GAAG;AACtC,QAAM,UAAU,MAAM,CAAC,UAAU,MAAM,OAAO;AAC9C,QAAM,cAAc,MAAM,CAAC,UAAU,MAAM,WAAW;AAEhD,QAAA,oBAAoB,eAAe,cAAc;AACjD,QAAA,kBAAkB,eAAe,YAAY;AAC7C,QAAA,wBAAwB,eAAe,kBAAkB;AACzD,QAAA,0BAA0B,eAAe,oBAAoB;AAEnE,4BAA0B,MAAM;AAC9B,UAAM,WAAW,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,OAAO;AAClC,YAAM,SAAS,IAAI,aAAa,IAAI,EAAE;AACtC,YAAM,cAAc,MAAM,IAAI,CAAC,WAAW,EAAE,aAAa,CAAC,GAAG,MAAM,aAAa,MAAM,EAAA,EAAI;AAC1F,YAAM,iBAAiB,MAAM,IAAI,CAAC,WAAW,EAAE,aAAa,MAAM,YAAY,OAAO,CAAC,OAAO,OAAO,MAAM,EAAA,EAAI;AAEvG,aAAA,iBAAiB,aAAa,WAAW;AACzC,aAAA,iBAAiB,gBAAgB,cAAc;AAEtD,aAAO,MAAM;AACJ,eAAA,oBAAoB,aAAa,WAAW;AAC5C,eAAA,oBAAoB,gBAAgB,cAAc;MAAA;IAC3D,CACD;AAED,WAAO,MAAM,SAAS,QAAQ,CAAC,YAAY,QAAS,CAAA;EAAA,GACnD,CAAC,IAAI,GAAG,CAAC;AAEc,4BAAA,MAAM,mBAAmB,UAAU,CAAC,EAAE,SAAAI,SAAAA,MAAc,IAAI,OAAO,EAAE,SAAAA,SAAAA,EAAU,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC;AAErH,4BAA0B,MAAM;AAC3B,OAAA,GAAG,aAAa,SAAS;AACxB,QAAA,OAAO,EAAE,UAAY,EAAA;EAAA,GACxB,CAAC,GAAG,IAAI,WAAW,GAAG,CAAC;AAE1B,4BAA0B,MAAM;;AAC1B,QAAA;AACE,UAAA;AAAW,SAAAC,MAAA,WAAA,OAAA,SAAA,QAAS,0BAAT,OAAA,SAAAA,IAAA,KAAA,SAAiC,SAAA;IAAA,SACzC,GAAA;IAET;AACI,QAAA,OAAO,EAAE,UAAY,EAAA;EACxB,GAAA,CAAC,SAAS,WAAW,GAAG,CAAC;AAE5B,4BAA0B,MAAM;AACxB,UAAA,qBAAqB,mBAAmB,SAAA;AAC3C,OAAA,GAAG,sBAAsB,cAAc;AACtC,QAAA,OAAO,EAAE,eAAiB,EAAA;AAC9B,uBAAmB,IAAI,EAAE,oBAAoB,eAAgB,CAAA;EAAA,GAC5D,CAAC,GAAG,IAAI,gBAAgB,GAAG,CAAC;AAE/B,4BAA0B,MAAM;AAC9B,QAAI,CAAC;AAAS,aAAO,KAAK,GAAG,GAAG,WAAW,IAAK;AAE1C,UAAA,qBAAqB,CAAC,gBAAgC;;AAC1D,UAAI,OAAO,EAAE,cAAc,KAAA,EAAO;AAChB,OAAAA,MAAA,kBAAA,YAAA,OAAA,SAAAA,IAAA,KAAA,mBAAU,EAAE,aAAa,EAAE,GAAG,aAAa,QAAQ,QAAQ,GAAG,QAAQ,QAAS,CAAA;IAAA;AAE7F,UAAA,mBAAmB,CAAC,gBAAgC;;AACxD,UAAI,OAAO,EAAE,cAAc,OAAO,SAAS,KAAO,EAAA;AAClD,yBAAmB,SAAS,OAAO,EAAE,SAAS,KAAA,EAAO;AACrC,OAAAA,MAAA,gBAAA,YAAA,OAAA,SAAAA,IAAA,KAAA,iBAAU,EAAE,aAAa,EAAE,GAAG,aAAa,QAAQ,QAAQ,GAAG,QAAQ,QAAS,CAAA;IAAA;AAE3F,UAAA,yBAAyB,CAAC,gBAAgC;;AAC9D,OAAAA,MAAA,sBAAsB,YAAtB,OAAA,SAAAA,IAAA,KAAA,uBAAgC,EAAE,aAAa,QAAQ,QAAS,CAAA;IAAA;AAE5D,UAAA,2BAA2B,CAAC,gBAA0C;;AACpE,YAAA,iBAAiB,OAAO,OAAO,QAAQ,YAAY,EAAE,KAAK,CAAC,WAAW,OAAO,IAAI;AACnF,UAAA,OAAO,EAAE,eAAiB,EAAA;AAC9B,OAAAA,MAAA,wBAAwB,YAAxB,OAAA,SAAAA,IAAA,KAAA,yBAAkC,EAAE,aAAa,QAAQ,QAAS,CAAA;IAAA;AAGjE,OAAA,GAAG,iBAAiB,gBAAgB,kBAAkB;AACtD,OAAA,GAAG,iBAAiB,cAAc,gBAAgB;AAC7C,YAAA,iBAAiB,oBAAoB,sBAAsB;AAC3D,YAAA,iBAAiB,sBAAsB,wBAAwB;AAEvE,OAAG,GAAG,WAAW,OAAO,EAAE,KAAK,MAAM;AAGnC,SAAG,GAAG,aAAa,IAAI,EAAE,SAAS;IAAA,CACnC;AAED,WAAO,MAAM;AACR,SAAA,GAAG,oBAAoB,gBAAgB,kBAAkB;AACzD,SAAA,GAAG,oBAAoB,cAAc,gBAAgB;AAChD,cAAA,oBAAoB,oBAAoB,sBAAsB;AAC9D,cAAA,oBAAoB,sBAAsB,wBAAwB;IAAA;EAC5E,GACC,CAAC,SAAS,GAAG,IAAI,KAAK,GAAG,CAAC;AAG3B,SAAA,qBAAC,oBAAA,MACE,qBAAA,aAAA;IAAU,QAAQ;EAAA,GAChB,qBAAA,aAAA;IAAU,QAAQ;EAAA,CAAQ,GAC1B,YAAY,IAAI,CAAC,eACf,qBAAA,aAAA;IAAU,KAAK,WAAW;IAAO,QAAQ;EAAA,CAAY,CACvD,CACH,GACC,QACH;AAEJ;AAEO,SAAS,GAAG,OAAgB;AACjC,QAAM,QAAc;IAClB,MACE,OAAgB,CAAC,KAAK,SAAS;MAC7B;MACA;MAEA,aAAa,CAAC;MACd,cAAc;MACd,gBAAgB;MAChB,QAAQ,IAAU,MAAM;MACxB,SAAS;MACT,WAAW;MACX,gBAAgB;MAEhB,YAAY;QACV,MAAA,oBAAU,IAAI;QACd,OAAA,oBAAW,IAAI;QACf,MAAA,oBAAU,IAAI;MAChB;MACA,cAAA,oBAAkB,IAAI;MACtB,eAAe,QAAwB,WAA8B;;AACnE,eAAO,CAAC,GAACA,MAAA,IAAI,EACV,aAAa,IAAI,MAAM,MADjB,OAAA,SAAAA,IAEJ,SAAA,EAAW,KAAK,CAAC,eAAe,WAAW,OAAA;MAClD;MACA,eAAe,QAAwB,WAA8B;;AAC5D,gBAAAA,MAAA,IACJ,EAAA,aAAa,IAAI,MAAM,MADnB,OAAA,SAAAA,IAEF,SAAA,EAAW,OAAO,CAAC,QAAQ,eAAe;AAC3C,cAAI,WAAW,SAAS;AACf,mBAAA,KAAK,WAAW,OAAO;UAChC;AACO,iBAAA;QACT,GAAG,CAA4B,CAAA;MACnC;MACA,eAAe,QAAwB,WAA8B,YAAmD;AAChH,cAAA,eAAe,IAAM,EAAA;AAC3B,YAAI,CAAC,aAAa,IAAI,MAAM,GAAG;AAC7B,uBAAa,IAAI,QAAQ;YACvB,SAAS,CAAC;YACV,QAAQ,CAAC;YACT,UAAU,CAAC;YACX,aAAa,CAAC;YACd,eAAe,CAAC;YAChB,gBAAgB,CAAC;YACjB,WAAW,CAAC;YACZ,cAAc,CAAC;YACf,gBAAgB,CAAC;YACjB,iBAAiB,CAAC;YAClB,QAAQ,CAAC;UAAA,CACV;QACH;AAEM,cAAA,SAAS,aAAa,IAAI,MAAM;AAC/B,eAAA,SAAA,EAAW,KAAK,UAAU;MACnC;MACA,kBAAkB,QAAwB,WAA8B,YAAmD;AACzH,cAAM,SAAS,IAAM,EAAA,aAAa,IAAI,MAAM;AAC5C,YAAI,QAAQ;AACV,gBAAM,mBAAmB,OAAO,SAAA,EAAW,QAAQ,UAAU;AAC7D,cAAI,qBAAqB;AAAW,mBAAA,SAAA,EAAW,OAAO,kBAAkB,CAAC;QAC3E;MACF;IAAA,EACA;IACJ,CAAC;EAAA;AAID,SAAA,qBAAC,UAAU,UAAV;IAAmB,OAAO;EAAA,GACxB,qBAAA,WAAA;IAAW,GAAG;EAAO,CAAA,CACxB;AAEJ;AAsBA,IAAM,oBAAoB,CACxB,+BACA,gBAC8B;;AAC1B,MAAA,CAAC,iCAAiC,CAAC,aAAa;AAC3C,WAAA;EACT;AAEI,MAAA,iCAAiC,CAAC,aAAa;AACjD,WAAO,EAAE,kBAAkB,CAAC,6BAA6B,EAAA;EAC3D;AAEA,MAAI,iCAAiC,aAAa;AAChD,WAAO,EAAE,GAAG,aAAa,kBAAkB,KAAK,CAAC,IAAIA,MAAA,YAAY,qBAAZ,OAAAA,MAAgC,CAAA,GAAK,6BAA6B,CAAC,EAAE;EAC5H;AAEO,SAAA;AACT;AAEa,IAAA,eAAe,OAAO,aAA4B,gBAA8C;AACrG,QAAA,UAAU,mBAAmB,SAAA;AAEnC,MAAI,QAAQ,SAAS;AACnB,YAAQ,KAAK,gEAAgE;AAC7E;EACF;AAEA,QAAM,UAAU,kBAAkB,QAAQ,oBAAoB,WAAW;AACzE,QAAM,UAAU,MAAM,UAAU,GAAI,eAAe,aAAa,OAAO;AACvE,UAAQ,IAAI,OAAO,EAAE,QAAA,EAAU;AACxB,SAAA;AACT;AAEO,IAAM,cAAc,YAAY;AAC/B,QAAA,UAAU,mBAAmB,SAAA;AAE/B,MAAA,CAAC,QAAQ,SAAS;AACpB,YAAQ,KAAK,4DAA4D;AACzE;EACF;AAEM,QAAA,QAAQ,QAAQ,IAAA;AACtB,UAAQ,IAAI,EAAE,SAAS,KAAM,CAAA;AAC/B;AAEa,IAAA,gBAAgB,OAC3B,aACA,EAAE,aAAa,WAAW,SAA4E,IAAA,CAAA,MACnG;AACG,QAAA,UAAU,mBAAmB,SAAA;AAGnC,MAAI,QAAQ,WAAW;AAAW;AAC9B,MAAA,CAAC,QAAQ,WAAW;AAAU;AAGlC,MAAI,QAAQ,SAAS;AACnB,WAAO,MAAM,YAAY;EAAA,OACpB;AACE,WAAA,MAAM,aAAa,aAAa,WAAW;EACpD;AACF;AAEA,IAAM,WAAW,CAAC,QAAwB,MAA6B,WAAsC;AACnG,UAAA,QAAA;IAAA,KACD;AACH,aAAO,QAAQ,IAAA;IAAA,KACZ;AACH,aAAO,SAAS,IAAA;IAAA,KACb;IAAA;AAEK,cAAA,QAAA;QAAA,KACD;AACI,iBAAA;QAAA,KACJ;AACH,iBAAO,GAAG,IAAA;QAAA,KACP;QAAA;AAEH,iBAAO,GAAG,IAAA;MAAA;EAAA;AAGpB;AAEO,IAAM,WAAiB,kBAA6C,SAASC,UAClF,EAAE,MAAM,aAAa,YAAY,OAAO,WAAW,OAAO,SAAS,SAAS,UAAA,GAAa,MAAA,GACzF,KACA;;AACA,QAAM,CAAC,QAAQ,SAAS,IAAU,gBAAyB,QAAQ;AACnE,QAAM,CAAC,QAAQ,SAAS,IAAU,gBAAoC,SAAS;AAC/E,QAAM,QAAQ,SAAS,QAAQ,MAAM,MAAM;AAC3C,QAAM,cAAe,SAAS,WAAW,OAAO,aAAa,KAAK,YAAY,CAAA;AACxE,QAAA,aAAa,eAAe,OAAO;AAEzC,4BAA0B,MAAM;AAC9B,QAAI,EAAC,aAAA,OAAA,SAAA,UAAW;AAAW,aAAA,KAAK,UAAU,aAAa;AACvD,cAAU,GACP,mBAAmB,WAAW,EAC9B,KAAK,CAAC,cAAc;AACnB,UAAI,CAAC,WAAW;AACR,cAAA,UAAU,SAAS,aAAa;AACtC,kBAAU,aAAa;AACb,kBAAA,UAAU,YAAY,OAAO;MAAA,OAClC;AACL,kBAAU,QAAQ;MACpB;IAAA,CACD,EACA,MAAM,CAAC,UAAU;AAChB,gBAAU,aAAa;AAEvB,UAAI,UAAU,SAAS,MAAM,SAAS,iBAAiB;AACrD,kBAAU,UAAU;MAAA,OACf;AACL,kBAAU,SAAS;MACrB;IAAA,CACD;EAAA,GACF,CAAC,WAAW,CAAC;AAEhB;IACE,MACE,mBAAmB,UAAU,CAAC,UAAU;AACtC,UAAI,MAAM,SAAS;AACjB,kBAAU,SAAS;MAAA,WACV,WAAW,eAAe;AACnC,kBAAU,QAAQ;MACpB;IAAA,CACD;IACH,CAAC,MAAM;EAAA;AAGT,QAAM,oBAA0B;IAC9B,OAAO,UAA2D;AAChE,iBAAA,OAAA,SAAA,QAAU,KAAA;AAEN,UAAA;AACF,sBAAc,aAAa,EAAE,aAAa,WAAW,SAAU,CAAA;MAAA,SACxD,GAAA;AACP,cAAMC,WAAU,WAAW;AAC3B,YAAIA,YAAW,aAAa;AAAOA,mBAAQ,CAAC;;AACjC,gBAAA;MACb;IACF;IACA,CAAC,SAAS,aAAa,aAAa,WAAW,UAAU,UAAU;EAAA;AAGrE,SACG,qBAAA,UAAA;IAAQ,GAAG;IAAO;IAAU,SAAS,WAAW,gBAAgB,UAAU;EAAA,IACvEF,MAAA,OAAO,aAAa,aAAa,SAAS,MAAM,IAAI,aAApD,OAAAA,MAAiE,KACrE;AAEJ,CAAC;AAED,IAAM,eAAoB;EACxB,UAAU;EACV,QAAQ;EACR,MAAM;EACN,WAAW;EACX,SAAS;EACT,QAAQ;EACR,cAAc;EACd,YAAY;EACZ,OAAO;EACP,MAAM;EACN,SAAS;EACT,QAAQ;EACR,QAAQ;AACV;AAEO,IAAM,WAAiB;EAC5B,CACE;IACE,QAAQ;IACR,cAAc;MAEZ,YAAY,OAAO,aAAa,cAAc,EAAE,MAAM,SAAS,KAAS,IAAA;MACxE,kBAAkB,CAAC,YAAY,eAAe,6BAA6B;IAC7E;IACA;IAAA,GACG;EACL,GACA,QAEC,qBAAA,UAAA;IAAU,GAAG;IAAM;IAAU,MAAK;IAAK;IAAc;EAAA,GACnD,QACH;AAEJ;AAEO,IAAM,WAAiB;EAC5B,CACE;IACE,QAAQ;IACR,cAAc,EAAE,kBAAkB,CAAC,eAAe,iBAAiB,iBAAiB,QAAQ,EAAE;IAC9F;IAAA,GACG;EACL,GACA,QAEC,qBAAA,UAAA;IAAU,GAAG;IAAM;IAAU,MAAK;IAAK;IAAc;EAAA,GACnD,QACH;AAEJ;AAEO,SAAS,MACd,WAAsC,CAAC,UAAU,OACjD,YACA;AACM,QAAA,QAAc,kBAAW,SAAS;AACxC,MAAI,CAAC;AAAa,UAAA,IAAI,MAAM,gDAAgD;AACrE,SAAA,MAAM,UAAU,UAAU;AACnC;AAEO,SAAS,cAAc,YAA0B;AACtD,QAAM,cAAc,MAAM,CAAC,UAAU,MAAM,WAAW;AACtD,QAAM,aAAmB;IACvB,MAAM,YAAY,KAAK,CAAC,EAAE,YAAY,OAAM,eAAA,OAAA,SAAA,YAAa,eAAc,YAAY,eAAe,UAAU;IAC5G,CAAC,YAAY,WAAW;EAAA;AAGnB,SAAA;AACT;;;AC/dA,IAAM,wBAAwB;AAC9B,IAAM,kBAAkB;AAEjB,IAAM,2BAAN,MAA+B;EAKpC,YAAY,aAAgC,MAAM,OAAO,uBAAuB;AACzE,SAAA,aAAa,cAAA,OAAA,aAAc,IAAI,WAAW;AAC/C,SAAK,OAAO;AACZ,SAAK,cAAc,CAAA;EACrB;EAEC,0BAA0B,iBAAoC,eAA6C;AAE1G,QAAI,cAAc,kBAAkB,qBAAqB,CAAC,cAAc,SAAS;AAC/E,aAAO,QAAQ,QAAA;IACjB;AAEO,WAAA,aAAa,eAAe,KAAK,MAAM,eAAe,EAC1D,KAAK,CAAC,EAAE,SAAS,UAAA,MAAgB;AAChC,UAAI,CAAC,WAAW;AACR,cAAA,IAAI,MAAM,eAAe;MACjC;AAEA,YAAM,mBAAmB,IAAI,iBAAiB,eAAe,SAAS,SAAS;AAC/E,sBAAgB,wBAAwB,gBAAgB;AAExD,YAAM,WAAW,iBAAiB;AAE5B,YAAA,cAAc,KAAK,YAAY,QAAA;AACrC,UAAI,aAAa;AACT,cAAA,QAAQ,YAAY,MAAM,MAAM;AAEtC,wBAAgB,aAAa,KAAK;MAAA,OAC7B;AACD,YAAA,CAAC,KAAK,YAAY;AACd,gBAAA,IAAI,MAAM,qBAAqB;QACvC;AAEK,aAAA,WAAW,QAAQ,EAAE;AAC1B,aAAK,WAAW;UACd;UACA,CAAC,UAA+B;AAC1B,gBAAA,CAAC,gBAAgB,kBAAkB;AACrC,sBAAQ,KAAK,mDAAmD;AAChE;YACF;AAEA,iBAAK,YAAY,QAAA,IAAY;AACvB,kBAAA,QAAQ,MAAM,MAAM,MAAM;AAChC,4BAAgB,aAAa,KAAK;UACpC;UACA;UACA,MAAM;AACE,kBAAA,IAAI,MAAM,SAAS,QAAA,wBAAgC;UAC3D;QAAA;MAEJ;IAAA,CACD,EACA,MAAM,CAAC,QAAQ;AACd,cAAQ,KAAK,GAAG;IAAA,CACjB;EACL;AACF;;;ACrDA,IAAM,qBAAqB,CAAC,aAAwD,YAAY;AAEhG,IAAM,eAAe,CAAC,UAA+B,WAA2B;AAC9E,WAAS,SAAS;AAClB,WAAS,cAAc;AACzB;AAEA,IAAM,sBAAsB,CAAC,QAAwB,QAAwB;AAC3E,MAAI,eAAe,MAAM;AACvB,QAAI,MAAM,QAAQ,IAAI,QAAQ,GAAG;AAC3B,UAAA,SAAS,QAAQ,CAAC,MAAO,mBAAmB,CAAC,IAAI,aAAa,GAAG,MAAM,IAAI,MAAU;IAChF,WAAA,mBAAmB,IAAI,QAAQ,GAAG;AAC9B,mBAAA,IAAI,UAAU,MAAM;IACnC;EACF;AACF;AAIA,IAAM,8BAA8B,CAAC,aAAiE,qBAAqB;AAE3H,IAAM,wBAAwB,CAAC,UAAwC,oBAA4B;AACjG,WAAS,kBAAkB;AAC3B,WAAS,cAAc;AACzB;AAEA,IAAM,+BAA+B,CAAC,iBAAyB,QAAwB;AACrF,MAAI,eAAe,MAAM;AACvB,QAAI,MAAM,QAAQ,IAAI,QAAQ,GAAG;AAC3B,UAAA,SAAS,QAAQ,CAAC,MAAO,4BAA4B,CAAC,IAAI,sBAAsB,GAAG,eAAe,IAAI,MAAU;IAC3G,WAAA,4BAA4B,IAAI,QAAQ,GAAG;AAC9B,4BAAA,IAAI,UAAU,eAAe;IACrD;EACF;AACF;AAOA,SAAS,UAAU,kBAAoC,OAAuB;AAE5E,SAAO,OAAO,iBAAiB,UAAU,EAAE,QAAQ,CAAC,cAAc;AAChE,UAAM,EAAE,MAAM,oBAAoB,gBAAA,IAAoB;AAEtD,QAAI,SAAS,0BAA0B,cAAc,YAAY,oBAAoB;AACzE,gBAAA,iBAAiB,MAAM,gBAAgB,kBAAkB;AACnE,UAAI,UAAU,gBAAgB;AAEtB,cAAA,iBAAiB,IAAI,eAAe,IAAK;AAC/C,cAAM,WAAW,IAAI,kBAAkB,EAAE,OAAO,IAAU,CAAA;AAC1D,cAAM,SAAS,IAAI,KAAK,gBAAgB,QAAQ;AACtC,kBAAA,eAAe,IAAI,MAAM;MAAA,OAC9B;AACL,gBAAQ,KAAK,6BAA6B,UAAU,kBAAA,2BAA6C,UAAU,EAAA,EAAI;MACjH;IACF;AAGA,WAAO,OAAO,eAAe,EAAE,QAAQ,CAAC,mBAAmB;AACzD,YAAM,EAAE,eAAe,aAAa,aAAa,kBAAA,IAAsB;AAGvE,UAAI,sBAAsB,0BAA0B,uBAAuB,aAAa,eAAe,aAAa;AACnG,uBAAA,UAAU,MAAM,gBAAgB,WAAW;AAC3C,uBAAA,UAAU,MAAM,gBAAgB,WAAW;AAGtD,YAAA,CAAC,eAAe,SAAS;AACnB,kBAAA,KAAK,kBAAkB,WAAA,eAA0B;AACzD;QACF;AAEI,YAAA,CAAC,eAAe,SAAS;AACnB,kBAAA,KAAK,kBAAkB,WAAA,eAA0B;AACzD;QACF;MACF;AAGe,qBAAA,YAAY,MAAM,gBAAgB,aAAa;AAC1D,UAAA,CAAC,eAAe,WAAW;AACrB,gBAAA,KAAK,kBAAkB,aAAA,eAA4B;MAC7D;IAAA,CACD;EAAA,CACF;AACH;AAEA,SAAS,+BAA+B,iBAAoC,OAAuB;AAEvF,YAAA,gBAAgB,kBAAmB,KAAK;AAGlD,MAAI,gBAAgB,UAAU,gBAAgB,mBAAmB,MAAM;AAC/D,UAAA,SAAS,CAAC,MAAM;AACpB,UAAI,gBAAgB;AAA4B,4BAAA,gBAAgB,QAAQ,CAAC;AACzE,UAAI,gBAAgB,mBAAmB;AAAmC,qCAAA,gBAAgB,iBAAiB,CAAC;IAAA,CAC7G;EACH;AAGA,kBAAgB,IAAI,KAAK;AAC3B;AAEO,IAAM,oBAAN,cAAgC,MAAM;EAM3C,cAAc;AACN,UAAA;AAEN,SAAK,mBAAmB;AACxB,SAAK,SAAS;AACd,SAAK,kBAAkB;AACvB,SAAK,QAAQ;EACf;EAEA,kBAAkB,QAAwB,kBAAkB,GAAsB;;AAChF,QAAI,KAAK,WAAW,UAAU,KAAK,oBAAoB,iBAAiB;AAC/D,aAAA;IACT;AAEA,SAAK,SAAS;AACd,SAAK,kBAAkB;AAClB,KAAAG,MAAA,KAAA,UAAA,OAAA,SAAAA,IAAO,SAAS,CAAC,MAAM;AAC1B,0BAAoB,QAAQ,CAAC;AAC7B,mCAA6B,iBAAiB,CAAC;IAAA,CAAA;AAG1C,WAAA;EACT;EAEA,2BAA2B,iBAA4C;;AACjE,QAAA,KAAK,oBAAoB,iBAAiB;AACrC,aAAA;IACT;AAEA,SAAK,kBAAkB;AACvB,KAAAA,MAAA,KAAK,UAAL,OAAA,SAAAA,IAAY,SAAS,CAAC,MAAM,6BAA6B,iBAAiB,CAAC,CAAA;AAEpE,WAAA;EACT;EAEA,aAAa,OAAuB;AAC9B,QAAA,CAAC,KAAK,kBAAkB;AAC1B,cAAQ,KAAK,8CAA8C;AAC3D;IACF;AAEA,SAAK,QAAQ;AACb,mCAA+B,MAAM,KAAK;AAC1C,SAAK,cAAc;MACjB,MAAM;MACN,MAAM;IAAA,CACP;EACH;EAEA,wBAAwB,kBAA0C;AAChE,SAAK,mBAAmB;AACxB,SAAK,cAAc;MACjB,MAAM;MACN,MAAM;IAAA,CACP;EACH;EAMA,kBAAkB,OAAsB;AACtC,UAAM,kBAAkB,KAAK;AAE7B,QAAI,CAAC,KAAK;AAAkB;AAG5B,SAAK,iBAAiB,kBAAA;AAGtB,WAAO,OAAO,KAAK,iBAAiB,UAAU,EAAE,QAAQ,CAAC,cAAc;AAErE,aAAO,OAAO,UAAU,eAAe,EAAE,QAAQ,CAAC,mBAAmB;AACnE,cAAM,EAAE,WAAW,SAAS,SAAS,OAAO,kBAAsB,IAAA;AAIlE,YAAI,CAAC;AAAW;AAGhB,YAAI,sBAAsB,0BAA0B,uBAAuB,cAAc,OAAO,UAAU,WAAW;AACnH,oBAAU,UAAU;QAAA,WAEpB,sBAAsB,0BAA0B,uBAAuB,aACvE,WACA,WACA,OAAO,UAAU,UACjB;AACA,oBAAU,WAAW,iBAAiB,QAAQ,YAAY,QAAQ,YAAY,KAAK;AAEnF,oBAAU,SAAS,YAAY,QAAQ,UAAU,QAAQ,UAAU,KAAK;QAC1E;MAAA,CACD;IAAA,CACF;EACH;EAEA,aAAmB;AACjB,SAAK,cAAc;MACjB,MAAM;MACN,MAAM,KAAK;IAAA,CACZ;AACD,SAAK,cAAc;MACjB,MAAM;MACN,MAAM,KAAK;IAAA,CACZ;AACD,SAAK,mBAAmB;AACxB,QAAI,KAAK,OAAO;AACT,WAAA,OAAO,KAAK,KAAK;IACxB;AACA,SAAK,QAAQ;EACf;EAEA,UAAgB;AACd,SAAK,WAAW;EAClB;AACF;;;AClOa,IAAA,MAAY,kBAAiC,SAASC,KAAI,EAAE,QAAQ,aAAa,OAAA,GAAU,MAAM,GAAG,cAAc;AAC7H,QAAM,aAAa,MAAM,CAAC,UAAU,MAAM,UAAU;AAC9C,QAAA,MAAY,cAAmB,IAAK;AAC1C,QAAM,cAAoB;IACxB,MAAM,IAAU,eAAA,EAAiB,cAAc,CAAC,IAAU,QAAQ,GAAG,GAAG,CAAC,GAAG,IAAU,QAAQ,GAAG,GAAG,EAAE,CAAC,CAAC;IACxG,CAAC;EAAA;AAEH,EAAM,2BAAoB,cAAc,MAAM,IAAI,OAAO;AAGzD,WAAS,MAAM;AACT,QAAA,CAAC,OAAO,aAAa;AACvB;IACF;AAEA,QAAI,YAAY;AAEV,UAAA,eAAmC,WAAW,OAAO,YAAY,UAAA,EAAY,OAAO,EAAE,KAAO,EAAA;AACnG,QAAI,gBAAgB,OAAO,YAAY,eAAe,QAAQ;AAC5D,kBAAY,aAAa;AACrB,UAAA;AAAY,YAAI,QAAQ,UAAU;IAAA,WAC7B,YAAY;AACrB,UAAI,QAAQ,UAAU;IACxB;AAIA,UAAM,SAAS;AACX,QAAA,QAAQ,MAAM,IAAI,YAAY;EAAA,CACnC;AAGD,SAAQ,qBAAA,QAAA;IAAK,KAAK;IAAK,UAAU;IAAa,oBAAkB;IAAK,wBAAsB;IAAO,GAAG;EAAA,CAAO;AAC9G,CAAC;AAED,IAAM,eAAe,IAAI,yBAAA;AA4BzB,IAAM,kBAAkB,CAAC;EACvB;EACA;EACA;AACF,MAIM;AACE,QAAA,uBAA6B,cAAiC,IAAI;AAClE,QAAA,uBAAuB,eAAe,CAAC,sBAAyC;AACpF,QAAI,UAAU;AAAM;AACpB,sBAAkB,kBAAkB,MAAM;EAAA,CAC3C;AACD,QAAM,yBAAyB,eAAe,CAAC,sBAAyC,kBAAkB,kBAAkB,IAAI,CAAC;AAE3H,QAAA,gCAAgC,eAAe,CAAC,sBAAyC;AAC7F,QAAI,mBAAmB;AAAM;AAC7B,sBAAkB,2BAA2B,eAAe;EAAA,CAC7D;AAED,QAAM,wBAA8B;IAClC,CAAC,sBAAgD;;AAC/C,2BAAqB,UAAU;AAC/B,UAAI,mBAAmB;AACrB,eAAO,oBAAoB;AACvB,aAAAC,MAAA,OAAO,gBAAP,OAAA,SAAAA,IAAoB,MAAM;AAC5B;QACF;AAEA,6BAAqB,QAAQ,iBAAiB;AAC9C,sCAA8B,QAAQ,iBAAiB;AACvD,YAAI,OAAO,aAAa;AACT,uBAAA,0BAA0B,mBAAmB,OAAO,WAAW;QAAA,OACvE;AACL,kBAAQ,KAAK,4DAA4D;QAC3E;MAAA,OACK;AACD,aAAAC,MAAA,OAAO,gBAAP,OAAA,SAAAA,IAAoB,MAAM;AAC5B;QACF;AACA,SAAA,KAAA,OAAO,sBAAP,OAAA,SAAA,GAA0B,WAAA;AAC1B,eAAO,oBAAoB;MAC7B;IACF;IACA,CAAC,QAAQ,+BAA+B,oBAAoB;EAAA;AAG9D,EAAM,uBAAgB,MAAM;AAC1B,QAAI,qBAAqB,SAAS;AAChC,UAAI,QAAQ;AACW,6BAAA,QAAQ,qBAAqB,OAAO;MAAA,OACpD;AACkB,+BAAA,QAAQ,qBAAqB,OAAO;MAC7D;IACF;EACC,GAAA,CAAC,QAAQ,sBAAsB,sBAAsB,CAAC;AAEzD,EAAM,uBAAgB,MAAM;AAC1B,QAAI,qBAAqB,SAAS;AACF,oCAAA,QAAQ,qBAAqB,OAAO;IACpE;EAAA,GACC,CAAC,iBAAiB,6BAA6B,CAAC;AAEnD,SAAQ,qBAAA,qBAAA;IAAkB,KAAK;EAAA,CAAuB;AACxD;AAEgB,SAAA,YAAY,EAAE,cAAc,CAAA,GAAI,iBAAiB,OAAO,QAAQ,gBAAA,GAAqC;AACnH,QAAM,cAAc,MAAM,CAAC,UAAU,MAAM,WAAW;AACtD,QAAM,iBAAiB,MAAM,CAAC,UAAU,MAAM,cAAc;AAC5D,QAAM,mBAAyB;IAC7B,MACE,OAAO,QAAQ,WAAW,EAAE;MAC1B,CAAC,KAAK,CAAC,KAAK,KAAK,OAAO;QACtB,GAAG;QACH,CAAC,YAAY,GAAA,EAAA,GAAQ;MAAA;MAEvB,CAAC;IACH;IACF,CAAC,KAAK,UAAU,WAAW,CAAC;EAAA;AAExB,EAAA,eAAQ,MAAM,OAAO,EAAE,kBAAmB,CAAA,GAAG,CAAA,CAAE;AAGnD,SAAA,qBAAA,iBAAA,MACG,YAAY,IAAI,CAAC,QAAQ,MACxB,qBAAO,iBAAN;IAAe,KAAK;EAAA,GAClB,aAAc,qBAAA,iBAAA;IAAgB;IAAgB;IAAgB;EAAA,CAAkC,GAAI,OAAO,IAAI,GAC/G;IACE,qBAAA,KAAA;MAAI,SAAS,CAAC;MAAgB,YAAY;MAAgB;MAAiB,GAAG;IAAA,CAAkB;IACjG,OAAO;EAEX,CAAA,CACD,CACH;AAEJ;;;;;;AC5KA,IAAM,4BAA4B;AAElC,IAAM,kBAAN,MAAsB;EAMpB,YACE,WACA,YACA,OAAe,2BACf,YACA,iBACA;AACA,SAAK,aAAa;AAClB,SAAK,YAAY;AAEjB,SAAK,QAAQ,CAAA;AAEP,UAAA,SAAS,IAAI,WAAA;AACnB,QAAI,CAAC;AAAiB,aAAO,QAAQ,IAAI;AACzC,WAAO,KAAK,mBAAA,OAAA,kBAAmB,GAAG,UAAA,QAAkB,CAAC,SAA8B;AAC3E,YAAA,SAAS,KAAK,MAAM,SAAS,CAAA;AAC9B,WAAA,UAAU,IAAI,MAAM;AACzB,WAAK,QAAQ;AAEb,YAAM,OAAO,OAAO,oBAAoB,QAAQ,aAAa;AAC7D,WAAK,gBAAgB;AACrB,WAAK,aAAa;AAClB,WAAK,gBAAgB;AAErB,YAAM,SAAS;QACb;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;MAAA;AAGK,aAAA,QAAQ,CAAC,cAAc;AACtB,cAAA,OAAO,OAAO,gBAAgB,SAAS;AAE7C,YAAI,SAAS,QAAW;AACtB,eAAK,YAAY;QAAA,OACZ;AACG,kBAAA,KAAK,iBAAiB,SAAA,OAAgB,UAAA,YAAsB;QACtE;AAEK,aAAA,MAAM,KAAK,IAAI;MAAA,CACrB;IAAA,CACF;EACH;EAEA,aAAmB;AAEX,UAAA,WAAY,KAAK,WAAmB;AAC1C,QAAI,eAAe;AAEnB,aAAS,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AACpC,YAAA,OAAO,KAAK,MAAM,CAAA;AAExB,UAAI,MAAM;AACF,cAAA,UAAU,SAAU,KAAa,SAAA;AAEvC,YAAI,QAAQ,SAAS;AACnB,gBAAM,WAAW,QAAQ;AACpB,eAAA,SAAS,KAAK,QAAQ;AACtB,eAAA,WAAW,KAAK,QAAQ,UAAU;AACxB,yBAAA;QACjB;MACF;IACF;AAGI,QAAA,gBAAgB,KAAK,OAAO;AAC9B,WAAK,MAAM,UAAU;IAAA,WACZ,KAAK,OAAO;AACrB,WAAK,MAAM,UAAU;IACvB;EACF;EAEA,UAAgB;AACd,QAAI,KAAK,OAAO;AACT,WAAA,UAAU,OAAO,KAAK,KAAK;IAClC;EACF;AACF;;;AC5GA,IAAM,eAAe;AACrB,IAAM,iBAAiB;AASvB,IAAM,kBAAN,cAA8B,SAAS;EAUrC,YAAY,YAAsB,eAAwB,gBAAyB;AAC3E,UAAA;AAeA,SAAA,eAAmE,CAAC,UAAU;AACpF,YAAM,gBAAgB,MAAM;AAE5B,UAAI,cAAc,QAAQ,CAAC,KAAK,kBAAkB;AAChD,aAAK,gBAAgB;AAErB,aAAK,mBAAmB,IAAI;UAC1B;UACA,KAAK;UACL;UACA,cAAc;UACd,cAAc,eAAe,SAAS,KAAK,gBAAgB,KAAK;QAAA;MAEpE;IAAA;AAGF,SAAQ,kBAAyE,MAAM;;AACjF,UAAA,GAACC,MAAA,KAAK,kBAAL,OAAA,SAAAA,IAAoB,OAAM;AAC7B;MACF;AACA,WAAK,wBAAwB;IAAA;AAjC7B,SAAK,aAAa;AAClB,SAAK,mBAAmB;AACxB,SAAK,SAAS;AACd,SAAK,gBAAgB;AACrB,SAAK,iBAAiB;AAEtB,SAAK,OAAO;AACZ,SAAK,gBAAgB;AAEV,eAAA,iBAAiB,aAAa,KAAK,YAAY;AAC/C,eAAA,iBAAiB,gBAAgB,KAAK,eAAe;EAClE;EAyBQ,0BAAgC;;AACtC,SAAK,MAAM;AACX,KAAAA,MAAA,KAAK,qBAAL,OAAA,SAAAA,IAAuB,QAAA;AACvB,SAAK,mBAAmB;EAC1B;EAEA,kBAAkB,OAAuB;AACvC,UAAM,kBAAkB,KAAK;AAE7B,QAAI,KAAK,kBAAkB;AACzB,WAAK,iBAAiB,WAAA;IACxB;EACF;EAEA,qBAAqC;AAE7B,UAAA,iBAAiB,KAAK,WAAW,OAAO,cAAA;AAC9C,QAAI,gBAAgB;AAClB,aAAO,eAAe;IAAA,OACjB;AACE,aAAA;IACT;EACF;EAEA,mBAAmB,WAA8B;AACzC,UAAA,kBAAkB,KAAK,mBAAA;AAC7B,QAAI,iBAAiB;AACnB,YAAM,cAAc,IAAI,OAAO,iBAAiB,YAAY;AAC5D,YAAM,MAAM,IAAI,KAAK,EAAE,cAAc,SAAS;AACvC,aAAA,YAAY,cAAc,GAAG;IAAA,OAC/B;AACE,aAAA;IACT;EACF;EAEA,YAAY,QAAwB;AAC9B,QAAA,KAAK,mBAAmB,MAAM,GAAG;AACnC,aAAO,QAAQ;IAAA,OACV;AACL,aAAO,QAAQ;IACjB;AAEI,QAAA,OAAO,UAAA,GAAa;AACtB,aAAO,aAAa;IACtB;EACF;EAEA,UAAgB;AACd,SAAK,wBAAwB;AAE7B,SAAK,WAAW,oBAAoB,aAAa,KAAK,YAAY;AAClE,SAAK,WAAW,oBAAoB,gBAAgB,KAAK,eAAe;EAC1E;AACF;;;AChGO,SAAS,MAAM,EAAE,WAAW,WAAA,GAA0B;AAC3D,QAAM,cAAc,MAAM,CAAC,UAAU,MAAM,WAAW;AAChD,EAAA,eAAQ,MAAM,OAAO,EAAE,gBAAiB,CAAA,GAAG,CAAA,CAAE;AAGnD,4BAA0B,MAAM;AAC9B,eAAW,UAAU,aAAa;AACzB,aAAA,KAAK,cAAc,EAAE,MAAM,aAAa,MAAM,OAAO,aAAa,MAAM,KAAM,CAAA;IACvF;EACC,GAAA,CAAC,aAAa,WAAW,UAAU,CAAC;AAEhC,SAAA,qBAAA,iBAAA,MAAG,YAAY,IAAI,CAAC,EAAE,KAAK,MAAM,aAAc,qBAAA,mBAAA;IAAgB,MAAM,CAAC,MAAM,WAAW,UAAU;EAAA,CAAG,GAAI,IAAI,CAAC,CAAE;AACxH;;;;ACzBA,IAAM,KAAyB,IAAM,WAAA;AAU9B,SAAS,mBAAqC;AAC7C,QAAA,QAAc,cAAA;AACd,QAAA,qBAA2B,cAAgC,IAAI;AAC/D,QAAA,yBAA+B,cAAgC,IAAI;AAEhE,WAAA,CAAC,OAAO,GAAG,YAAY;;AAC9B,UAAM,UAAU;AAEhB,UAAM,iBAAiB,MAAM,GAAG,GAAG,kBAAkB;AACrD,KAAAC,MAAA,mBAAmB,YAAnB,OAAAA,MAAA,mBAAmB,UAAY;AAE/B,UAAM,iBAAiB,uBAAuB;AAC1C,QAAA,kBAAkB,mBAAmB,gBAAgB;AACjD,YAAA,GAAG,GAAG,kBAAkB,cAAc;IAC9C;EAAA,CACD;AAEM,SAAM,mBAAY,CAAC,WAAW;;AACnC,UAAM,OAAO,mBAAmB;AAChC,QAAI,MAAM;AACR,YAAM,CAAC,GAAG,GAAG,CAAC,IAAI,MAAM,KAAK,MAA4B;AACnD,YAAA,iBAAiB,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,EAAA;AAE3C,YAAM,QAAOA,MAAA,MAAM,YAAN,OAAA,SAAAA,IAAe,cAAc,IAAA;AAC1C,UAAI,MAAM;AACO,uBAAA,KAAK,KAAK,UAAU,SAAS;AAC7B,uBAAA,KAAK,KAAK,UAAU,SAAS;MAC9C;AAEA,YAAM,iBAAiB,IAAI,iBAAiB,gBAAgB,EAAE;AACvC,6BAAA,UAAU,KAAK,wBAAwB,cAAc;IAC9E;EACF,GAAG,CAAE,CAAA;AACP;AAgBO,IAAM,qBAA2B,kBAAiD,SAASC,oBAChG,EAAE,WAAW,OAAO,YAAY,OAAO,cAAc,IAAI,OAAO,MAAA,GAAS,MAAA,GACzE,KACA;AACA,QAAM,WAAW,iBAAA;AACX,QAAA,SAAe,cAAmB,IAAK;AACvC,QAAA,eAAqB,cAAA;AAC3B,QAAM,SAAS,SAAS,CAAC,UAAU,MAAM,MAAM;AAE/C,QAAM,gBAAsB;IAC1B,CAAC,MAAmC;;AAC5B,YAAA,cAAaD,MAAA,EAAE,OAAO,gBAAT,OAAA,SAAAA,IAAsB;AACzC,aAAO,CAAC,GAAG,eAAe,UAAU,cAAc,eAAe,WAAW;IAC9E;IACA,CAAC,UAAU,SAAS;EAAA;AAGtB,SACG,qBAAA,SAAA;IAAM;IAAW,GAAG;EAAA,GAClB,qBAAA,QAAA;IAAK,KAAK;IAAQ,SAAS;IAAO,cAAY,CAAC,KAAK,KAAK;EAAA,GACvD,qBAAA,kBAAA;IAAe,MAAM,CAAC,MAAM,EAAE;EAAA,CAAG,GACjC,qBAAA,qBAAA;IAAkB,OAAM;EAAQ,CAAA,CACnC,GACC,qBAAA,aAAA;IACC,QAAQ,CAAC,MAAM;AACb,UAAI,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;AAAc;AAE1C,YAAM,qBAAqB,EAAE,aAAa,MAAM,WAAW,OAAO,QAAQ;AACnE,aAAA,QAAQ,UAAU,sBAAsB;AACxC,aAAA,QAAQ,MAAM,UAAU,CAAC;AAEnB,mBAAA,UAAU,EAAE,aAAa;AACtC,aAAO,QAAQ,SAAS,KAAK,aAAa,OAAO;IACnD;IACA,SAAS,CAAC,MAAM;AACd,UAAI,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;AAAc;AAE1C,YAAM,qBAAqB,EAAE,aAAa,MAAM,WAAW,OAAO,QAAQ;AACnE,aAAA,QAAQ,UAAU,sBAAsB;AACxC,aAAA,QAAQ,MAAM,UAAU,CAAC;IAClC;IACA,QAAQ,CAAC,MAAM;AACT,UAAA,CAAC,cAAc,CAAC;AAAG;AACvB,aAAO,QAAQ,UAAU;IAC3B;IACA,eAAe,CAAC,MAAM;AACpB,UAAI,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;AAAc;AAE1C,YAAM,qBAAqB,EAAE,aAAa,MAAM,WAAW,OAAO,QAAQ;AACnE,aAAA,QAAQ,UAAU,sBAAsB;AACxC,aAAA,QAAQ,MAAM,UAAU,GAAG;IACpC;IACA,aAAa,CAAC,MAAM;AAClB,UAAI,CAAC,cAAc,CAAC,KAAK,CAAC,aAAa;AAAS;AAEhD,aAAO,QAAQ,UAAU;AAClB,aAAA,QAAQ,MAAM,UAAU,CAAC;AAEhC,YAAM,qBAAqB,aAAa,QAAQ,WAAW,OAAO,QAAQ;AAC1E,UAAI,sBAAsB,aAAa;AACrC,iBAAS,aAAa,OAAO;MAC/B;IACF;EAAA,GAEC,qBAAA,QAAA;IAAK,cAAY,CAAC,KAAK,KAAK;IAAG,SAAS;IAAO,OAAO;EAAA,GACpD,qBAAA,iBAAA,IAAc,CACjB,CACF,CACF;AAEJ,CAAC;",
  "names": ["_a", "_b", "Interactive", "RayGrab", "session", "_a", "XRButton", "onError", "_a", "Ray", "_a", "_b", "_a", "_a", "TeleportationPlane"]
}
