import * as THREE from 'three';
import * as React from 'react';
/**
 * Teleport callback, accepting a world-space target position to teleport to.
 */
export declare type TeleportCallback = (target: THREE.Vector3 | THREE.Vector3Tuple) => void;
/**
 * Returns a {@link TeleportCallback} to teleport the player to a position.
 */
export declare function useTeleportation(): TeleportCallback;
export interface TeleportationPlaneProps extends Partial<JSX.IntrinsicElements['group']> {
    /** Whether to allow teleportation from left controller. Default is `false` */
    leftHand?: boolean;
    /** Whether to allow teleportation from right controller. Default is `false` */
    rightHand?: boolean;
    /** The maximum distance from the camera to the teleportation point. Default is `10` */
    maxDistance?: number;
    /** The radial size of the teleportation marker. Default is `0.25` */
    size?: number;
}
/**
 * Creates a teleportation plane with a marker that will teleport on interaction.
 */
export declare const TeleportationPlane: React.ForwardRefExoticComponent<Pick<TeleportationPlaneProps, "type" | "children" | "traverse" | "name" | "visible" | "id" | "onClick" | "onContextMenu" | "onDoubleClick" | "onPointerDown" | "onPointerMove" | "onPointerUp" | "onPointerCancel" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOut" | "onWheel" | "layers" | "quaternion" | "attach" | "args" | "key" | "onUpdate" | "clone" | "copy" | "add" | "toJSON" | "position" | "up" | "scale" | "rotation" | "matrix" | "dispose" | "uuid" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "isGroup" | "size" | "onPointerMissed" | "leftHand" | "rightHand" | "maxDistance"> & React.RefAttributes<THREE.Group>>;
