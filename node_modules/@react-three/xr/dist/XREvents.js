import { useXR } from "./XR.js";
import { useCallbackRef, useIsomorphicLayoutEffect } from "./utils.js";
function useXREvent(event, handler, { handedness } = {}) {
  const handlerRef = useCallbackRef(handler);
  const controllers = useXR((state) => state.controllers);
  useIsomorphicLayoutEffect(() => {
    const listeners = controllers.map((target) => {
      if (handedness && target.inputSource && target.inputSource.handedness !== handedness)
        return;
      const listener = (nativeEvent) => handlerRef.current({ nativeEvent, target });
      target.controller.addEventListener(event, listener);
      return () => target.controller.removeEventListener(event, listener);
    });
    return () => listeners.forEach((cleanup) => cleanup == null ? void 0 : cleanup());
  }, [controllers, handedness, event]);
}
export {
  useXREvent
};
//# sourceMappingURL=XREvents.js.map
